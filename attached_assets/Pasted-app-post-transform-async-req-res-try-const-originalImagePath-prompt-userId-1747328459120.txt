app.post('/transform', async (req, res) => {
  try {
    const { originalImagePath, prompt, userId, imageSize, isEdit, previousTransformation } = req.body;

    if (!originalImagePath || !prompt) {
      return res.status(400).json({ 
        error: "Validation error",
        message: "Original image path and prompt are required" 
      });
    }

    console.log("Transformation request:", {
      originalImagePath,
      promptLength: prompt.length,
      userId,
      imageSize,
      isEdit,
      previousTransformation
    });

    // Path normalization and existence checks
    let imagePath = originalImagePath;
    if (!fs.existsSync(imagePath) && !path.isAbsolute(imagePath)) {
      imagePath = path.join(process.cwd(), originalImagePath);
      console.log(`Trying resolved path: ${imagePath}`);
    }
    if (!fs.existsSync(imagePath) && originalImagePath.startsWith('uploads/')) {
      imagePath = path.join(process.cwd(), originalImagePath);
      console.log(`Trying with uploads prefix: ${imagePath}`);
    }
    if (!fs.existsSync(imagePath)) {
      const filename = path.basename(originalImagePath);
      imagePath = path.join(process.cwd(), 'uploads', filename);
      console.log(`Last attempt with filename only: ${imagePath}`);
    }
    if (!fs.existsSync(imagePath)) {
      console.error(`Original image not found at any of the attempted paths. Last tried: ${imagePath}`);
      return res.status(404).json({ 
        error: "Not found",
        message: "Original image not found", 
        details: `Image not found at path: ${originalImagePath}` 
      });
    }

    // Proceed with transformation
    const transformedImagePath = await transformImageWithOpenAI(imagePath, prompt);

    // Store transformation in database if userId is provided
    if (userId) {
      try {
        const transformation = await storage.createTransformation({
          userId,
          originalImagePath,
          prompt,
          status: "completed",
          editsUsed: isEdit ? 1 : 0
        });

        await storage.updateTransformationStatus(
          transformation.id,
          "completed",
          transformedImagePath
        );

        console.log(`Transformation stored in database with ID: ${transformation.id}`);
      } catch (dbError) {
        console.error("Failed to store transformation in database:", dbError);
        // Continue; don't block the response
      }
    }

    // Always respond with JSON!
    res.json({
      transformedImagePath,
      transformedImageUrl: `/${transformedImagePath}`
    });

  } catch (error: any) {
    console.error("Error transforming image:", error);
    res.status(500).json({
      error: "Transformation error",
      message: error.message || "Unknown error occurred during image transformation",
      details: error.stack || undefined
    });
  }
});
