const Anthropic = require('@anthropic-ai/sdk');
const sharp = require('sharp');

async function analyzeProducts(req, res) {
  try {
    const { image_urls, industry_context, product_type } = req.body;
    
    const anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
    });
    
    // Process each image
    const analyses = [];
    
    for (const imageUrl of image_urls) {
      // Convert image to base64 (handle both URLs and base64)
      let imageBase64;
      if (imageUrl.startsWith('data:')) {
        imageBase64 = imageUrl.split(',')[1];
      } else {
        // Fetch and convert URL to base64
        const response = await fetch(imageUrl);
        const buffer = await response.buffer();
        
        // Resize if too large (Claude has limits)
        const resized = await sharp(buffer)
          .resize(1500, 1500, { fit: 'inside' })
          .jpeg({ quality: 85 })
          .toBuffer();
          
        imageBase64 = resized.toString('base64');
      }
      
      // Call Claude Vision
      const message = await anthropic.messages.create({
        model: "claude-3-sonnet-20240229",
        max_tokens: 1000,
        messages: [{
          role: "user",
          content: [
            {
              type: "image",
              source: {
                type: "base64",
                media_type: "image/jpeg",
                data: imageBase64
              }
            },
            {
              type: "text",
              text: `Analyze this product image for a ${industry_context} business.
                     Product type: ${product_type || 'Not specified'}
                     
                     Provide analysis in JSON format:
                     {
                       "product_identification": "what product is this",
                       "current_quality": {
                         "lighting": "description",
                         "background": "description",
                         "composition": "description",
                         "technical": "description"
                       },
                       "strengths": ["strength1", "strength2"],
                       "improvements_needed": ["improvement1", "improvement2"],
                       "target_audience_score": 7,
                       "ecommerce_readiness": 6
                     }`
            }
          ]
        }]
      });
      
      analyses.push({
        image_url: imageUrl,
        analysis: JSON.parse(message.content[0].text)
      });
    }
    
    res.json({ success: true, analyses });
    
  } catch (error) {
    console.error('Vision analysis error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to analyze images',
      details: error.message 
    });
  }
}