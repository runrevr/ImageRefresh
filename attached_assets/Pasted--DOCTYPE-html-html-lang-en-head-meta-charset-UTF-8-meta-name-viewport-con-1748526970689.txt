<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Diagnostic Test</title>
    <style>
        /* Reset any possible hiding CSS */
        * {
            display: initial !important;
            visibility: visible !important;
            opacity: 1 !important;
        }
        body {
            margin: 0;
            padding: 20px;
            background: #f0f0f0;
            display: block !important;
        }
        #root {
            display: block !important;
            min-height: 100px;
            border: 5px solid red;
            background: white;
            padding: 20px;
        }
        .diagnostic {
            position: fixed;
            top: 0;
            right: 0;
            background: yellow;
            padding: 10px;
            z-index: 999999;
            border: 3px solid black;
        }
    </style>
</head>
<body>
    <div class="diagnostic">
        <h3>Diagnostic Panel</h3>
        <div id="diagnostic-info"></div>
    </div>
    
    <h1 style="color: blue;">Static HTML Test</h1>
    <p>If you can see this blue heading, HTML rendering works!</p>
    
    <div id="root">
        <h2 style="color: green;">Initial Root Content</h2>
        <p>This should be replaced by React...</p>
    </div>

    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    
    <script>
        const diagPanel = document.getElementById('diagnostic-info');
        
        function log(message) {
            console.log(message);
            diagPanel.innerHTML += `<div>${message}</div>`;
        }
        
        log('1. Page loaded');
        log(`2. React: ${typeof React !== 'undefined' ? 'Loaded' : 'NOT LOADED'}`);
        log(`3. ReactDOM: ${typeof ReactDOM !== 'undefined' ? 'Loaded' : 'NOT LOADED'}`);
        
        // Test 1: Direct DOM manipulation
        const testDiv = document.createElement('div');
        testDiv.style.cssText = 'background: orange; padding: 20px; margin: 20px 0;';
        testDiv.innerHTML = '<h3>Direct DOM Manipulation Test - Orange Box</h3>';
        document.body.appendChild(testDiv);
        log('4. DOM manipulation: Success');
        
        // Test 2: React render test
        if (typeof React !== 'undefined' && typeof ReactDOM !== 'undefined') {
            const e = React.createElement;
            
            const TestApp = () => {
                const [count, setCount] = React.useState(0);
                
                React.useEffect(() => {
                    log('6. React component mounted!');
                }, []);
                
                return e('div', { 
                    style: { 
                        background: 'lightgreen', 
                        padding: '20px',
                        border: '3px solid darkgreen'
                    } 
                },
                    e('h1', null, 'React is Working!'),
                    e('p', null, `Click count: ${count}`),
                    e('button', { 
                        onClick: () => setCount(count + 1),
                        style: { padding: '10px', fontSize: '16px' }
                    }, 'Click Me!')
                );
            };
            
            const root = document.getElementById('root');
            log('5. Attempting React render...');
            
            try {
                // Try React 18 way
                if (ReactDOM.createRoot) {
                    const reactRoot = ReactDOM.createRoot(root);
                    reactRoot.render(e(TestApp));
                    log('7. React 18 createRoot used');
                } else {
                    // Fallback to React 17 way
                    ReactDOM.render(e(TestApp), root);
                    log('7. React 17 render used');
                }
                
                // Check if render worked
                setTimeout(() => {
                    const rootHTML = document.getElementById('root').innerHTML;
                    log(`8. Root HTML length: ${rootHTML.length} chars`);
                    if (rootHTML.includes('React is Working')) {
                        log('9. SUCCESS: React content found in DOM!');
                    } else {
                        log('9. FAIL: React content NOT in DOM');
                        log(`10. Root contains: ${rootHTML.substring(0, 50)}...`);
                    }
                }, 500);
                
            } catch (error) {
                log(`ERROR: ${error.message}`);
            }
        }
        
        // Test 3: Check for interfering styles
        setTimeout(() => {
            const root = document.getElementById('root');
            const computedStyle = window.getComputedStyle(root);
            log(`11. Root visibility: ${computedStyle.visibility}`);
            log(`12. Root display: ${computedStyle.display}`);
            log(`13. Root opacity: ${computedStyle.opacity}`);
        }, 1000);
    </script>
</body>
</html>