Create Blog Backend Files
A. Update your main server file (index.js or app.js)
Find your main server file (usually index.js, app.js, or server.js) and ADD these lines to the existing code:
javascript// ADD THESE IMPORTS at the top (after your existing imports)
const multer = require('multer');
const crypto = require('crypto');

// ADD THIS MIDDLEWARE (after your existing middleware)
app.use('/uploads', express.static('uploads'));

// CREATE THESE DIRECTORIES AND FILES (add this after your existing setup)
const DB_PATH = './data';
const POSTS_FILE = path.join(DB_PATH, 'posts.json');
const CATEGORIES_FILE = path.join(DB_PATH, 'categories.json');
const TAGS_FILE = path.join(DB_PATH, 'tags.json');

// ADD THIS IMAGE UPLOAD CONFIGURATION
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    const uploadDir = './uploads';
    try {
      await fs.mkdir(uploadDir, { recursive: true });
      cb(null, uploadDir);
    } catch (error) {
      cb(error);
    }
  },
  filename: (req, file, cb) => {
    const uniqueName = crypto.randomUUID() + path.extname(file.originalname);
    cb(null, uniqueName);
  }
});

const upload = multer({ 
  storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'));
    }
  },
  limits: { fileSize: 5 * 1024 * 1024 }
});

// ADD DATABASE INITIALIZATION FUNCTION
async function initBlogDB() {
  try {
    await fs.mkdir(DB_PATH, { recursive: true });
    
    try {
      await fs.access(POSTS_FILE);
    } catch {
      await fs.writeFile(POSTS_FILE, JSON.stringify([]));
    }
    
    try {
      await fs.access(CATEGORIES_FILE);
    } catch {
      const defaultCategories = [
        { id: 'ai-tutorials', name: 'AI Tutorials', description: 'How-to guides and tutorials' },
        { id: 'success-stories', name: 'Success Stories', description: 'Customer transformations and results' },
        { id: 'business-tips', name: 'Business Tips', description: 'Help users grow their businesses' },
        { id: 'creative-inspiration', name: 'Creative Inspiration', description: 'Showcase amazing transformations' },
        { id: 'product-updates', name: 'Product Updates', description: 'Announce new features' }
      ];
      await fs.writeFile(CATEGORIES_FILE, JSON.stringify(defaultCategories, null, 2));
    }
    
    try {
      await fs.access(TAGS_FILE);
    } catch {
      const defaultTags = ['AI', 'photography', 'business', 'tutorial', 'transformation', 'ecommerce', 'marketing', 'tips', 'case-study', 'beginner-friendly'];
      await fs.writeFile(TAGS_FILE, JSON.stringify(defaultTags, null, 2));
    }
    
    console.log('✅ Blog database initialized');
  } catch (error) {
    console.error('❌ Blog database initialization failed:', error);
  }
}

// ADD DATABASE HELPER FUNCTIONS
async function readJSON(filePath) {
  try {
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`Error reading ${filePath}:`, error);
    return [];
  }
}

async function writeJSON(filePath, data) {
  try {
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error(`Error writing ${filePath}:`, error);
    return false;
  }
}

function generateSlug(title) {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9 -]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-');
}
B. Add Blog Routes (ADD to your existing routes section)
javascript// BLOG ROUTES - ADD THESE TO YOUR EXISTING ROUTES

// Serve blog pages
app.get('/blog', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'blog.html'));
});

app.get('/admin/blog', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// Blog API Routes
app.get('/api/posts', async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const category = req.query.category;
    const tag = req.query.tag;
    const search = req.query.search;
    
    let filteredPosts = posts.filter(post => post.published);
    
    if (category) {
      filteredPosts = filteredPosts.filter(post => post.category === category);
    }
    
    if (tag) {
      filteredPosts = filteredPosts.filter(post => post.tags.includes(tag));
    }
    
    if (search) {
      const searchTerm = search.toLowerCase();
      filteredPosts = filteredPosts.filter(post => 
        post.title.toLowerCase().includes(searchTerm) ||
        post.excerpt.toLowerCase().includes(searchTerm)
      );
    }
    
    filteredPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    const startIndex = (page - 1) * limit;
    const endIndex = page * limit;
    const paginatedPosts = filteredPosts.slice(startIndex, endIndex);
    
    res.json({
      posts: paginatedPosts,
      totalPosts: filteredPosts.length,
      currentPage: page,
      totalPages: Math.ceil(filteredPosts.length / limit),
      hasNext: endIndex < filteredPosts.length,
      hasPrev: startIndex > 0
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch posts' });
  }
});

app.get('/api/posts/:slug', async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const post = posts.find(p => p.slug === req.params.slug && p.published);
    
    if (!post) {
      return res.status(404).json({ error: 'Post not found' });
    }
    
    res.json(post);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch post' });
  }
});

app.post('/api/posts', upload.single('featuredImage'), async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const { title, excerpt, content, category, tags, published } = req.body;
    
    if (!title || !excerpt || !content) {
      return res.status(400).json({ error: 'Title, excerpt, and content are required' });
    }
    
    const newPost = {
      id: crypto.randomUUID(),
      slug: generateSlug(title),
      title,
      excerpt,
      content,
      category: category || '',
      tags: tags ? JSON.parse(tags) : [],
      featuredImage: req.file ? `/uploads/${req.file.filename}` : null,
      published: published === 'true',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      views: 0
    };
    
    posts.push(newPost);
    await writeJSON(POSTS_FILE, posts);
    
    res.status(201).json(newPost);
  } catch (error) {
    console.error('Error creating post:', error);
    res.status(500).json({ error: 'Failed to create post' });
  }
});

app.put('/api/posts/:id', upload.single('featuredImage'), async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const postIndex = posts.findIndex(p => p.id === req.params.id);
    
    if (postIndex === -1) {
      return res.status(404).json({ error: 'Post not found' });
    }
    
    const { title, excerpt, content, category, tags, published } = req.body;
    const updatedPost = {
      ...posts[postIndex],
      title: title || posts[postIndex].title,
      excerpt: excerpt || posts[postIndex].excerpt,
      content: content || posts[postIndex].content,
      category: category || posts[postIndex].category,
      tags: tags ? JSON.parse(tags) : posts[postIndex].tags,
      published: published !== undefined ? published === 'true' : posts[postIndex].published,
      updatedAt: new Date().toISOString()
    };
    
    if (title) {
      updatedPost.slug = generateSlug(title);
    }
    
    if (req.file) {
      updatedPost.featuredImage = `/uploads/${req.file.filename}`;
    }
    
    posts[postIndex] = updatedPost;
    await writeJSON(POSTS_FILE, posts);
    
    res.json(updatedPost);
  } catch (error) {
    res.status(500).json({ error: 'Failed to update post' });
  }
});

app.delete('/api/posts/:id', async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const postIndex = posts.findIndex(p => p.id === req.params.id);
    
    if (postIndex === -1) {
      return res.status(404).json({ error: 'Post not found' });
    }
    
    const deletedPost = posts.splice(postIndex, 1)[0];
    await writeJSON(POSTS_FILE, posts);
    
    res.json({ message: 'Post deleted successfully', post: deletedPost });
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete post' });
  }
});

app.get('/api/categories', async (req, res) => {
  try {
    const categories = await readJSON(CATEGORIES_FILE);
    res.json(categories);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch categories' });
  }
});

app.post('/api/categories', async (req, res) => {
  try {
    const categories = await readJSON(CATEGORIES_FILE);
    const { name, description } = req.body;
    
    if (!name) {
      return res.status(400).json({ error: 'Category name is required' });
    }
    
    const newCategory = {
      id: generateSlug(name),
      name,
      description: description || ''
    };
    
    categories.push(newCategory);
    await writeJSON(CATEGORIES_FILE, categories);
    
    res.status(201).json(newCategory);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create category' });
  }
});

app.get('/api/tags', async (req, res) => {
  try {
    const tags = await readJSON(TAGS_FILE);
    res.json(tags);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch tags' });
  }
});

app.post('/api/tags', async (req, res) => {
  try {
    const tags = await readJSON(TAGS_FILE);
    const { tag } = req.body;
    
    if (!tag || tags.includes(tag)) {
      return res.status(400).json({ error: 'Tag is required and must be unique' });
    }
    
    tags.push(tag);
    await writeJSON(TAGS_FILE, tags);
    
    res.status(201).json({ tag });
  } catch (error) {
    res.status(500).json({ error: 'Failed to add tag' });
  }
});

app.get('/api/admin/posts', async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    res.json(posts);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch posts' });
  }
});

app.post('/api/upload', upload.single('image'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No image uploaded' });
    }
    
    res.json({
      success: true,
      imageUrl: `/uploads/${req.file.filename}`,
      filename: req.file.filename
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to upload image' });
  }
});

app.get('/api/admin/stats', async (req, res) => {
  try {
    const posts = await readJSON(POSTS_FILE);
    const categories = await readJSON(CATEGORIES_FILE);
    const tags = await readJSON(TAGS_FILE);
    
    const publishedPosts = posts.filter(p => p.published);
    const draftPosts = posts.filter(p => !p.published);
    const totalViews = posts.reduce((sum, post) => sum + (post.views || 0), 0);
    
    res.json({
      totalPosts: posts.length,
      publishedPosts: publishedPosts.length,
      draftPosts: draftPosts.length,
      totalCategories: categories.length,
      totalTags: tags.length,
      totalViews
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});
C. Initialize Blog Database (ADD this to your server startup)
Find where your server starts (usually near the bottom of your main file) and ADD this:
javascript// ADD THIS BEFORE app.listen()
initBlogDB().then(() => {
  console.log('Blog database ready');
});