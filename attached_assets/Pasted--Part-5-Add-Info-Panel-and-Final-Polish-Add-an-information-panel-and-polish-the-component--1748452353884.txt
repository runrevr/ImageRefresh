---

## Part 5: Add Info Panel and Final Polish
Add an information panel and polish the component.

Add info panel state and component in GeneratedImageView.jsx:

jsxconst [showInfo, setShowInfo] = useState(false);

Add the info panel after the primary actions:

jsx{/* Info Panel */}
<div className={styles.infoSection}>
  <button 
    className={styles.infoToggle}
    onClick={() => setShowInfo(!showInfo)}
  >
    {showInfo ? '▼' : '▶'} Image Details
  </button>
  
  {showInfo && (
    <div className={styles.infoContent}>
      <div className={styles.infoRow}>
        <span className={styles.infoLabel}>Prompt:</span>
        <span className={styles.infoValue}>{prompt}</span>
      </div>
      <div className={styles.infoRow}>
        <span className={styles.infoLabel}>Created:</span>
        <span className={styles.infoValue}>{new Date().toLocaleString()}</span>
      </div>
      <div className={styles.infoRow}>
        <span className={styles.infoLabel}>Dimensions:</span>
        <span className={styles.infoValue}>1024 x 1024</span>
      </div>
    </div>
  )}
</div>

Add mobile responsiveness to GeneratedImageView.module.css:

css.infoSection {
  margin-top: 30px;
  background: #f9f9f9;
  border-radius: 8px;
  overflow: hidden;
}

.infoToggle {
  width: 100%;
  padding: 12px;
  border: none;
  background: none;
  text-align: left;
  cursor: pointer;
  font-weight: 500;
}

.infoContent {
  padding: 20px;
  border-top: 1px solid #e0e0e0;
}

.infoRow {
  display: flex;
  margin-bottom: 12px;
}

.infoLabel {
  font-weight: 500;
  margin-right: 12px;
  min-width: 100px;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .primaryActions {
    flex-direction: column;
    width: 100%;
  }
  
  .actionButton {
    width: 100%;
    justify-content: center;
  }
  
  .formatMenu {
    left: 0;
    right: 0;
  }
  
  .modalContent {
    margin: 20px;
  }
  
  .infoRow {
    flex-direction: column;
  }
  
  .infoLabel {
    margin-bottom: 4px;
  }
}

Add loading states. Update any button click to show loading:

jsxconst handleDownloadWithLoading = async () => {
  setIsLoading(true);
  await handleDownload();
  setIsLoading(false);
};

Add a loading overlay when isLoading is true:

jsx{isLoading && (
  <div className={styles.loadingOverlay}>
    <div className={styles.spinner}></div>
  </div>
)}

Add CSS for loading state:

css.loadingOverlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 3px solid #f0f0f0;
  border-top: 3px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}