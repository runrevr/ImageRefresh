import React, { useState, useEffect } from 'react'
import { Link, useLocation } from 'wouter'
import Navbar from '@/components/Navbar'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Check, 
  Clock, 
  AlertCircle, 
  RefreshCw, 
  ChevronLeft, 
  Sparkles, 
  Zap, 
  Download, 
  ExternalLink, 
  Share2,
  Star,
  StarOff,
  Mail,
  Upload,
  Archive,
  X,
  CheckCircle2,
  Eye,
  RotateCcw
} from 'lucide-react'
import { EmailCaptureModal } from '@/components/EmailCaptureModal'
import { UpgradePrompt } from '@/components/UpgradePrompt'
import { useFreeCredits } from '@/hooks/useFreeCredits'
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';

interface EnhancementJob {
  id: string
  productId: string
  originalImageUrl: string
  enhancementTitle: string
  enhancementPrompt: string
  status: 'queued' | 'creating_prompt' | 'generating_image' | 'complete' | 'failed'
  progress: number
  resultImageUrl?: string
  errorMessage?: string
  retryCount: number
  estimatedTime?: number
  startTime?: number
  isChaosMode?: boolean
  ideaDescription?: string
  fileName?: string
  isFavorite?: boolean
}

export default function GenerateEnhancementsPage() {
  const { toast } = useToast();
  const { user } = useAuth();
  const [, setLocation] = useLocation()
  const [jobs, setJobs] = useState<EnhancementJob[]>([])
  const [overallProgress, setOverallProgress] = useState(0)

  // Ensure page loads at top
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
  const [completedCount, setCompletedCount] = useState(0)
  const [failedCount, setFailedCount] = useState(0)
  const [estimatedTimeRemaining, setEstimatedTimeRemaining] = useState(0)
  const [isProcessing, setIsProcessing] = useState(true)
  const [currentJobIndex, setCurrentJobIndex] = useState(0)
  const [currentJobTimer, setCurrentJobTimer] = useState(0)
  const [currentJobMessage, setCurrentJobMessage] = useState('')
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [showUpgradePrompt, setShowUpgradePrompt] = useState(false)
  const [creditStatus, setCreditStatus] = useState<any>(null)
  const [showCelebration, setShowCelebration] = useState(false)
  const [lightboxImage, setLightboxImage] = useState<string | null>(null)

  // Download options
  const [selectedFormat, setSelectedFormat] = useState<'PNG' | 'JPG'>('PNG')
  const [selectedResolution, setSelectedResolution] = useState<'original' | 'hd' | '4k'>('original')
  const [emailAddress, setEmailAddress] = useState('')

  // Integrated credit system
  const { checkUserCredits, useCredit, isAuthenticated } = useFreeCredits()

  // Load authentic selected enhancements from session storage
  useEffect(() => {
    const selectedEnhancements = JSON.parse(sessionStorage.getItem('selected_enhancements') || '[]');
    console.log('Generation page received:', selectedEnhancements);
    console.log('Enhancement data:', selectedEnhancements);
    console.log('First image URL:', selectedEnhancements[0]?.image_url);

    // Create jobs from authentic selected enhancements
    const enhancementJobs: EnhancementJob[] = [];

    selectedEnhancements.forEach((enhancement: any, index: number) => {
      enhancement.selected_ideas.forEach((idea: any, ideaIndex: number) => {
        // Check if this is a chaos concept (usually concept #5 or contains chaos indicators)
        const isChaosMode = idea.title.includes('Levitating') || 
                           idea.title.includes('Cosmic') || 
                           idea.title.includes('Infinite') ||
                           idea.description.includes('gravity-defying') ||
                           idea.description.includes('surreal');

        enhancementJobs.push({
          id: `job-${index}-${ideaIndex}`,
          productId: enhancement.image_id,
          originalImageUrl: enhancement.image_url,
          enhancementTitle: idea.title,
          enhancementPrompt: '', // Will be generated by Claude
          status: 'queued',
          progress: 0,
          retryCount: 0,
          estimatedTime: isChaosMode ? 90 : 60, // Chaos concepts take longer
          isChaosMode: isChaosMode,
          ideaDescription: idea.description,
          fileName: enhancement.fileName,
          isFavorite: false
        });
      });
    });

    console.log('Created enhancement jobs:', enhancementJobs);
    setJobs(enhancementJobs)

    // Check credits before starting (async)
    checkUserCredits().then(credits => {
      setCreditStatus(credits)
      console.log('Credit status on generation page:', credits);
      console.log('User auth status:', user ? 'authenticated' : 'guest');
      
      // For authenticated users, check if they have any credits (free or paid)
      if (user) {
        // User is authenticated - they should have credits if they made it this far
        console.log('User is authenticated, proceeding with generation');
        return; // Don't block authenticated users
      }
      
      // For guests, only block if they've used their free credit
      if (!user && !credits.hasCredits && credits.hasUsedFreeCredit) {
        console.log('Guest user has used free credit, showing upgrade prompt');
        setShowUpgradePrompt(true)
        setIsProcessing(false)
        return
      }
      
      console.log('Credits available, starting processing');
    })

    // Start authentic AI processing
    setTimeout(() => {
      processEnhancements(enhancementJobs)
    }, 1000)
  }, [])

  // Real AI processing function that calls Claude + GPT-image-01
  const processEnhancements = async (initialJobs: EnhancementJob[]) => {
    console.log('Starting authentic AI processing for', initialJobs.length, 'enhancements');
    console.log('Initial jobs data:', initialJobs);
    setIsProcessing(true);

    if (!initialJobs || initialJobs.length === 0) {
      console.error('No jobs to process!');
      return;
    }

    const currentJobs = [...initialJobs];
    setJobs(currentJobs);

    console.log('About to start processing loop for', currentJobs.length, 'jobs');

    for (let i = 0; i < currentJobs.length; i++) {
      const job = currentJobs[i];
      console.log(`Processing job ${i + 1}/${currentJobs.length}:`, job.enhancementTitle);
      setCurrentJobIndex(i);
      setCurrentJobMessage(`[${job.enhancementTitle}] Step 1: Creating prompt with Claude...`);

      try {
        console.log('About to call Claude API for prompt generation...');
        // Step 1: Generate edit prompt with Claude
        currentJobs[i] = { ...currentJobs[i], status: 'creating_prompt', progress: 20 };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-edit-prompt...');
        const promptResponse = await fetch('/api/generate-edit-prompt', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            idea_title: job.enhancementTitle,
            idea_description: job.ideaDescription,
            is_chaos_concept: job.isChaosMode
          })
        });

        console.log('Fetch response received:', promptResponse.status, promptResponse.statusText);

        if (!promptResponse.ok) {
          const errorText = await promptResponse.text();
          console.error('Prompt API error response:', errorText);
          throw new Error(`Prompt generation failed: ${promptResponse.statusText} - ${errorText}`);
        }

        // Try to parse JSON with error handling
        let promptResult;
        try {
          const responseText = await promptResponse.text();
          console.log('Raw response text:', responseText);
          console.log('Response text length:', responseText.length);
          console.log('Response text preview:', responseText.substring(0, 200));

          promptResult = JSON.parse(responseText);
          console.log('JSON parsing successful');
        } catch (parseError) {
          console.error('JSON parsing failed:', parseError);
          console.error('Response that failed to parse:', await promptResponse.text());
          throw new Error(`Failed to parse response as JSON: ${parseError}`);
        }
        console.log('=== FRONTEND PROMPT RESPONSE ===');
        console.log('Response status:', promptResponse.status);
        console.log('Response headers:', promptResponse.headers);
        console.log('Full response:', JSON.stringify(promptResult, null, 2));
        console.log('Response type:', typeof promptResult);
        console.log('Has edit_prompt:', 'edit_prompt' in promptResult);
        console.log('Edit prompt:', promptResult.edit_prompt);
        console.log('Prompt length:', promptResult.edit_prompt?.length);
        console.log('Prompt type:', typeof promptResult.edit_prompt);
        console.log(`[${job.enhancementTitle}] Edit prompt received:`, promptResult.edit_prompt);

        // Validate that we got a proper edit prompt
        if (!promptResult.edit_prompt || promptResult.edit_prompt.trim().length === 0) {
          throw new Error(`No edit prompt received from Claude API. Response: ${JSON.stringify(promptResult)}`);
        }

        // Step 2: Generate image with GPT-image-01
        console.log('=== STARTING IMAGE GENERATION ===');
        console.log('About to call image generation API...');
        console.log('Original image URL:', job.originalImageUrl);
        console.log('Enhancement prompt:', promptResult.edit_prompt);
        console.log('Enhancement title:', job.enhancementTitle);

        setCurrentJobMessage(`[${job.enhancementTitle}] Step 2: Creating enhanced image...`);
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'generating_image', 
          progress: 60,
          enhancementPrompt: promptResult.edit_prompt
        };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-enhancement...');
        const imageResponse = await fetch('/api/generate-enhancement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            original_image_url: job.originalImageUrl,
            enhancement_prompt: promptResult.edit_prompt,
            enhancement_title: job.enhancementTitle
          })
        });

        if (!imageResponse.ok) {
          throw new Error(`Image generation failed: ${imageResponse.statusText}`);
        }

        const imageResult = await imageResponse.json();
        console.log(`[${job.enhancementTitle}] GPT-image-01 success!`, imageResult.enhanced_image_url);

        // Mark job as complete
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'complete', 
          progress: 100,
          resultImageUrl: imageResult.enhanced_image_url
        };
        setJobs([...currentJobs]);
        setCompletedCount(prev => prev + 1);

        // Brief pause between jobs
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`[${job.enhancementTitle}] Error:`, error);

        // Mark job as failed
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'failed', 
          errorMessage: error instanceof Error ? error.message : 'Unknown error'
        };
        setJobs([...currentJobs]);
        setFailedCount(prev => prev + 1);
      }
    }

    // All jobs complete
    setIsProcessing(false);
    setCurrentJobMessage('All enhancements complete!');
    setShowCelebration(true);
    console.log('Authentic AI processing complete!');

    // Hide celebration after 5 seconds
    setTimeout(() => setShowCelebration(false), 5000);
  };

  const retryJob = async (jobId: string) => {
    const jobIndex = jobs.findIndex(j => j.id === jobId)
    if (jobIndex === -1 || jobs[jobIndex].retryCount >= 3) return

    const updatedJobs = [...jobs]
    const job = updatedJobs[jobIndex];

    console.log(`🔄 Retrying job: ${job.enhancementTitle} (attempt ${job.retryCount + 1}/3)`);

    // Update retry count and reset status
    updatedJobs[jobIndex] = {
      ...updatedJobs[jobIndex],
      status: 'creating_prompt',
      progress: 20,
      retryCount: updatedJobs[jobIndex].retryCount + 1,
      errorMessage: undefined,
      resultImageUrl: undefined
    }
    setJobs(updatedJobs)

    try {
      console.log(`[Retry] Step 1: Generating prompt for "${job.enhancementTitle}"`);

      // Step 1: Generate edit prompt with Claude (same as main workflow)
      const promptResponse = await fetch('/api/generate-edit-prompt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          idea_title: job.enhancementTitle,
          idea_description: job.ideaDescription,
          is_chaos_concept: job.isChaosMode
        })
      });

      if (!promptResponse.ok) {
        const errorText = await promptResponse.text();
        console.error('Retry prompt API error:', errorText);
        throw new Error(`Prompt generation failed: ${promptResponse.statusText}`);
      }

      const promptResult = await promptResponse.json();
      console.log(`[Retry] Prompt generated:`, promptResult.edit_prompt);

      // Update to generating image status
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'generating_image',
        progress: 60,
        enhancementPrompt: promptResult.edit_prompt
      };
      setJobs([...updatedJobs]);

      console.log(`[Retry] Step 2: Generating image with GPT-image-01`);

      // Step 2: Generate image (same as main workflow)
      const imageResponse = await fetch('/api/generate-enhancement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          original_image_url: job.originalImageUrl,
          enhancement_prompt: promptResult.edit_prompt,
          enhancement_title: job.enhancementTitle
        })
      });

      if (!imageResponse.ok) {
        const errorText = await imageResponse.text();
        console.error('Retry image API error:', errorText);
        throw new Error(`Image generation failed: ${imageResponse.statusText}`);
      }

      const imageResult = await imageResponse.json();
      console.log(`[Retry] Success! Image generated:`, imageResult.enhanced_image_url);

      // Mark as complete
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'complete',
        progress: 100,
        resultImageUrl: imageResult.enhanced_image_url
      };
      setJobs([...updatedJobs]);
      setCompletedCount(prev => prev + 1);
      setFailedCount(prev => prev - 1);

    } catch (error) {
      console.error(`[Retry] Error for "${job.enhancementTitle}":`, error);

      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'failed',
        errorMessage: error instanceof Error ? error.message : 'Retry failed'
      };
      setJobs([...updatedJobs]);
    }
  }

  const skipJob = (jobId: string) => {
    setJobs(prevJobs => 
      prevJobs.map(job => 
        job.id === jobId 
          ? { ...job, status: 'complete', progress: 100, resultImageUrl: undefined }
          : job
      )
    )
    setCompletedCount(prev => prev + 1)
    setFailedCount(prev => prev - 1)
  }

  const toggleFavorite = (jobId: string) => {
    setJobs(prevJobs => 
      prevJobs.map(job => 
        job.id === jobId ? { ...job, isFavorite: !job.isFavorite } : job
      )
    )
  }

  const downloadImage = (imageUrl: string, filename: string, format: string = selectedFormat) => {
    const link = document.createElement('a')
    link.href = imageUrl
    link.download = `${filename.replace(/\s+/g, '-')}.${format.toLowerCase()}`
    link.click()
  }

  const downloadAll = () => {
    const successfulJobs = jobs.filter(job => job.status === 'complete' && job.resultImageUrl)
    successfulJobs.forEach((job, index) => {
      setTimeout(() => {
        downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)
      }, index * 500) // Stagger downloads
    })
  }

  const downloadFavorites = () => {
    const favorites = jobs.filter(job => job.isFavorite && job.resultImageUrl)
    favorites.forEach((job, index) => {
      setTimeout(() => {
        downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)
      }, index * 500)
    })
  }

  const emailResults = () => {
    if (!emailAddress) return
    console.log(`Emailing results to ${emailAddress}`)
    // In production, would call API to send email
  }

  const shareResult = (job: EnhancementJob) => {
    if (!job.resultImageUrl) return

    if (navigator.share) {
      navigator.share({
        title: `${job.enhancementTitle} - Enhanced Image`,
        text: 'Check out this AI-enhanced product image!',
        url: job.resultImageUrl
      })
    } else {
      navigator.clipboard.writeText(job.resultImageUrl)
      // You could add a toast notification here
    }
  }

  const regenerateImage = async (jobId: string) => {
    const jobIndex = jobs.findIndex(j => j.id === jobId)
    if (jobIndex === -1) return

    const updatedJobs = [...jobs]
    const job = updatedJobs[jobIndex];

    console.log(`🔄 Starting regeneration for: ${job.enhancementTitle}`);

    // Reset job status for regeneration
    updatedJobs[jobIndex] = {
      ...updatedJobs[jobIndex],
      status: 'creating_prompt',
      progress: 20,
      retryCount: 0,
      errorMessage: undefined,
      resultImageUrl: undefined
    }
    setJobs([...updatedJobs])

    try {
      console.log(`[Regenerate] Step 1: Generating new prompt for "${job.enhancementTitle}"`);

      // Step 1: Generate fresh edit prompt with Claude (same as main workflow)
      const promptResponse = await fetch('/api/generate-edit-prompt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          idea_title: job.enhancementTitle,
          idea_description: job.ideaDescription,
          is_chaos_concept: job.isChaosMode
        })
      });

      if (!promptResponse.ok) {
        const errorText = await promptResponse.text();
        console.error('Regenerate prompt API error:', errorText);
        throw new Error(`Prompt generation failed: ${promptResponse.statusText}`);
      }

      const promptResult = await promptResponse.json();
      console.log(`[Regenerate] New prompt generated:`, promptResult.edit_prompt);

      // Update to generating image status
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'generating_image',
        progress: 60,
        enhancementPrompt: promptResult.edit_prompt
      };
      setJobs([...updatedJobs]);

      console.log(`[Regenerate] Step 2: Generating new image with GPT-image-01`);

      // Step 2: Generate new image with fresh prompt (same as main workflow)
      const imageResponse = await fetch('/api/generate-enhancement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          original_image_url: job.originalImageUrl,
          enhancement_prompt: promptResult.edit_prompt,
          enhancement_title: job.enhancementTitle
        })
      });

      if (!imageResponse.ok) {
        const errorText = await imageResponse.text();
        console.error('Regenerate image API error:', errorText);
        throw new Error(`Image generation failed: ${imageResponse.statusText}`);
      }

      const imageResult = await imageResponse.json();
      console.log(`[Regenerate] Success! New image generated:`, imageResult.enhanced_image_url);

      // Mark as complete with new image
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'complete',
        progress: 100,
        resultImageUrl: imageResult.enhanced_image_url
      };
      setJobs([...updatedJobs]);

    } catch (error) {
      console.error(`[Regenerate] Error for "${job.enhancementTitle}":`, error);

      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'failed',
        errorMessage: error instanceof Error ? error.message : 'Regeneration failed'
      };
      setJobs([...updatedJobs]);
    }
  }

  // Handle email submission for guest users
  const handleEmailSubmit = async (email: string) => {
    try {
      // Use the credit and save email using your existing system
      await useCredit(email)

      // Close modal and redirect to results
      setShowEmailModal(false)
    } catch (error) {
      console.error('Failed to submit email:', error)
      throw new Error('Failed to save email. Please try again.')
    }
  }

  // Handle upgrade prompt actions
  const handleSignUp = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleViewPricing = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleUpgradeClose = () => {
    setShowUpgradePrompt(false)
    setLocation('/select-ideas')
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'queued':
        return <Clock className="w-4 h-4 text-gray-400" />
      case 'creating_prompt':
      case 'generating_image':
        return <RefreshCw className="w-4 h-4 text-blue-500 animate-spin" />
      case 'complete':
        return <Check className="w-4 h-4 text-green-500" />
      case 'failed':
        return <AlertCircle className="w-4 h-4 text-red-500" />
      default:
        return null
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'queued': return 'bg-gray-100 text-gray-600'
      case 'creating_prompt': return 'bg-blue-100 text-blue-600'
      case 'generating_image': return 'bg-blue-100 text-blue-600'
      case 'complete': return 'bg-green-100 text-green-600'
      case 'failed': return 'bg-red-100 text-red-600'
      default: return 'bg-gray-100 text-gray-600'
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const successfulJobs = jobs.filter(job => job.status === 'complete' && job.resultImageUrl)
  const favoriteCount = jobs.filter(job => job.isFavorite).length

  return (
    <>
      <style>{`
        :root {
          --primary: #06B6D4;
          --secondary: #84CC16;
          --tertiary: #F97316;
          --accent: #8B5CF6;
          --accent-alt: #EC4899;
          --neutral: #1F2937;
          --light: #FFFFFF;
          --gray: #6B7280;
        }

        .brand-bg-primary { background-color: var(--primary); }
        .brand-bg-secondary { background-color: var(--secondary); }
        .brand-bg-accent { background-color: var(--accent); }
        .brand-bg-light { background-color: var(--light); }

        .brand-text-primary { color: var(--primary); }
        .brand-text-secondary { color: var(--secondary); }
        .brand-text-neutral { color: var(--neutral); }

        .brand-border-primary { border-color: var(--primary); }
        .brand-border-secondary { border-color: var(--secondary); }

        .brand-button-primary {
          background-color: var(--primary);
          color: white;
        }
        .brand-button-primary:hover {
          background-color: #0891b2;
        }

        .brand-button-secondary {
          background-color: transparent;
          color: var(--primary);
          border: 2px solid var(--primary);
        }
        .brand-button-secondary:hover {
          background-color: var(--primary);
          color: white;
        }

        .brand-font-heading {
          font-family: 'Plus Jakarta Sans', sans-serif;
        }

        .brand-font-body {
          font-family: 'Montserrat', sans-serif;
        }

        .brand-card {
          background: white;
          border: 2px solid #e5e7eb;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .processing-gradient {
          background: linear-gradient(90deg, #06B6D4 0%, #8B5CF6 50%, #06B6D4 100%);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
          0% { background-position: -200% 0; }
          100% { background-position: 200% 0; }
        }

        .animate-shimmer {
          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
          animation: fadeIn 0.5s ease-out;
        }

        .sticky-footer {
          position: sticky;
          bottom: 0;
          background: white;
          border-top: 2px solid #e5e7eb;
          z-index: 10;
        }

        .confetti {
          position: absolute;
          width: 10px;
          height: 10px;
          background: var(--accent);
          animation: confetti-fall 3s linear infinite;
        }

        @keyframes confetti-fall {
          to {
            transform: translateY(100vh) rotate(360deg);
          }
        }

        .celebration-pulse {
          animation: celebration-pulse 2s ease-in-out infinite;
        }

        @keyframes celebration-pulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }

        /* Image Comparison Styles */
        .image-comparison-container {
          position: relative;
          overflow: hidden;
        }

        .before-image {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .after-image {
          position: relative;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      `}</style>

      <div className="min-h-screen brand-bg-light">
        <Navbar freeCredits={1} paidCredits={0} />

        {/* Celebration Confetti */}
        {showCelebration && (
          <div className="fixed inset-0 pointer-events-none z-30">
            {[...Array(20)].map((_, i) => (
              <div 
                key={i}
                className="confetti"
                style={{
                  left: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 3}s`,
                  backgroundColor: i % 3 === 0 ? '#8B5CF6' : i % 3 === 1 ? '#06B6D4' : '#EC4899'
                }}
              />
            ))}
          </div>
        )}

        {/* Progress Bar */}
        <div className="bg-white border-b-2 border-gray-200 sticky top-0 z-20">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between max-w-4xl mx-auto">
              {/* Step 1: Upload */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#06B6D4] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Upload</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#06B6D4] rounded"></div>

              {/* Step 2: Ideas Selection */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#06B6D4] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Ideas Selection</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#06B6D4] rounded"></div>

              {/* Step 3: Generate & Download - ACTIVE */}
              <div className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full bg-[#06B6D4] text-white text-sm font-semibold ${!isProcessing && showCelebration ? 'celebration-pulse' : ''}`}>
                  {isProcessing ? '3' : <Check className="w-4 h-4" />}
                </div>
                <span className="ml-2 text-sm font-medium text-[#06B6D4] brand-font-body">
                  {isProcessing ? 'Generate' : 'Complete!'}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="container mx-auto px-4 py-8 pb-32">
          {/* Header */}
          <div className="text-center mb-8">
            {isProcessing ? (
              <>
                <h1 className="text-4xl font-bold mb-4 brand-text-neutral brand-font-heading">
                  Creating Your Enhanced Images
                </h1>
                <p className="text-lg text-gray-600 brand-font-body max-w-3xl mx-auto mb-2">
                  Our AI is working on your selected enhancements. Each enhancement takes approximately 60 seconds to complete.
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-2xl mx-auto">
                  <p className="text-blue-800 brand-font-body text-sm">
                    ⚠️ Please don't close this tab - your images are being created. We'll notify you when complete!
                  </p>
                </div>
              </>
            ) : (
              <>
                <div className={`mb-6 ${showCelebration ? 'celebration-pulse' : ''}`}>
                  <div className="w-[120px] h-[120px] mx-auto mb-4 flex items-center justify-center bg-green-100 rounded-full">
                    <Sparkles className="w-12 h-12 text-[#8B5CF6]" />
                  </div>
                  <h1 className="text-4xl font-bold mb-4 brand-text-neutral brand-font-heading">
                    ✨ All Enhancements Complete!
                  </h1>
                  <p className="text-lg text-gray-600 brand-font-body max-w-3xl mx-auto">
                    Your enhanced images are ready! Download individual images or get them all at once.
                  </p>
                  <div className="flex items-center justify-center gap-2 mt-4">
                    <Check className="w-5 h-5 text-green-500" />
                    <span className="font-semibold text-[#06B6D4] brand-font-body">
                      {successfulJobs.length} of {jobs.length} enhancements generated successfully
                      {failedCount > 0 && ` (${failedCount} failed)`}
                    </span>
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Overall Progress Circle - Only show while processing */}
          {isProcessing && (
            <div className="text-center mb-8">
              {/* Bigger Circular Progress Indicator */}
              <div className="relative mx-auto mb-6">
                <div className="w-[150px] h-[150px] mx-auto">
                  <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                    {/* Background circle */}
                    <circle
                      cx="50"
                      cy="50"
                      r="45"
                      stroke="#e5e7eb"
                      strokeWidth="6"
                      fill="none"
                    />
                    {/* Progress circle */}
                    <circle
                      cx="50"
                      cy="50"
                      r="45"
                      stroke="#06B6D4"
                      strokeWidth="6"
                      fill="none"
                      strokeLinecap="round"
                      strokeDasharray={`${(completedCount / jobs.length) * 100 * 2.83} 283`}
                      className="transition-all duration-500 ease-out"
                      style={{
                        filter: 'drop-shadow(0 0 6px rgba(6, 182, 212, 0.3))'
                      }}
                    />
                  </svg>
                  {/* Percentage in center */}
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-3xl font-bold text-[#06B6D4] brand-font-heading">
                      {Math.round((completedCount / jobs.length) * 100)}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Individual Job Cards */}
          <div className="space-y-8">
            {jobs.map((job) => (
              <Card key={job.id} className={`brand-card transition-all duration-500 ${job.status === 'complete' ? 'animate-fade-in' : ''}`}>
                <CardContent className="p-6">
                  {/* Header */}
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-semibold brand-text-neutral brand-font-heading">
                      {job.enhancementTitle}
                    </h3>

                    {/* Status */}
                    <div className="flex items-center gap-2">
                      {job.status === 'complete' && job.resultImageUrl && (
                        <Check className="w-5 h-5 text-green-500" />
                      )}
                      <Badge className={`text-sm ${getStatusColor(job.status)}`}>
                        {job.status === 'queued' && 'Waiting...'}
                        {job.status === 'creating_prompt' && 'Generating...'}
                        {job.status === 'generating_image' && 'Generating...'}
                        {job.status === 'complete' && 'Complete!'}
                        {job.status === 'failed' && 'Failed'}
                      </Badge>
                    </div>
                  </div>

                  {/* Before/After Images */}
                  <div className="flex items-center justify-center gap-6 mb-4">
                    {/* Before Image */}
                    <div className="text-center">
                      <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">Before</p>
                      <img
                        src={job.originalImageUrl}
                        alt="Original product"
                        className="w-[200px] h-[200px] object-cover rounded-lg border-2 border-gray-200"
                      />
                    </div>

                    {/* Arrow */}
                    <div className="flex flex-col items-center">
                      <div className="w-8 h-8 rounded-full bg-[#0D7877] flex items-center justify-center">
                        <span className="text-white text-lg">→</span>
                      </div>
                    </div>

                    {/* After Image */}
                    <div className="text-center">
                      <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">After</p>
                      {job.status === 'complete' && job.resultImageUrl ? (
                        <div className="relative">
                          <img
                            src={job.resultImageUrl}
                            alt="Enhanced result"
                            className="w-[200px] h-[200px] object-cover rounded-lg border-2 border-green-200 cursor-pointer"
                            onClick={() => setLightboxImage(job.resultImageUrl!)}
                          />
                          <div className="absolute -top-2 -right-2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                            <Check className="w-4 h-4 text-white" />
                          </div>
                        </div>
                      ) : (
                        <div className="w-[200px] h-[200px] bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center">
                          <div className="text-center">
                            {job.status === 'failed' ? (
                              <div className="text-red-500">
                                <AlertCircle className="w-8 h-8 mx-auto mb-2" />
                                <p className="text-sm">Failed</p>
                              </div>
                            ) : (
                              <div className="text-gray-400">
                                <RefreshCw className={`w-8 h-8 mx-auto mb-2 ${job.status !== 'queued' ? 'animate-spin' : ''}`} />
                                <p className="text-sm">
                                  {job.status === 'queued' ? 'Waiting...' : 'Processing...'}
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Progress Bar */}
                  {(job.status === 'creating_prompt' || job.status === 'generating_image') && (
                    <div className="mt-4 mb-4">
                      <Progress 
                        value={job.progress} 
                        className="h-2 bg-blue-100"
                      />
                    </div>
                  )}

                  {/* Divider */}
                  {job.status === 'complete' && job.resultImageUrl && (
                    <div className="border-t border-gray-200 my-4"></div>
                  )}

                  {/* Action Buttons for Complete Images */}
                  {job.status === 'complete' && job.resultImageUrl && (
                    <div className="flex justify-end">
                      <div className="flex flex-wrap gap-2 md:gap-3">
                        <Button
                          size="sm"
                          onClick={() => downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)}
                          className="bg-[#84CC16] hover:bg-[#65A30D] text-white brand-font-body"
                        >
                          <Download className="w-4 h-4 mr-1" />
                          Download
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setLightboxImage(job.resultImageUrl!)}
                          className="brand-font-body border-gray-300 hover:bg-gray-50"
                        >
                          <Zap className="w-4 h-4 mr-1" />
                          View Full
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => shareResult(job)}
                          className="brand-font-body border-gray-300 hover:bg-gray-50"
                        >
                          <ExternalLink className="w-4 h-4 mr-1" />
                          Share
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => regenerateImage(job.id)}
                          className="brand-font-body border-gray-300 hover:bg-gray-50"
                        >
                          <RefreshCw className="w-4 h-4 mr-1" />
                          Regenerate
                        </Button>
                      </div>
                    </div>
                  )}

                  {/* Error Handling */}
                  {job.status === 'failed' && (
                    <div className="text-center mt-4">
                      {job.errorMessage && (
                        <p className="text-sm text-red-600 mb-4 brand-font-body">
                          {job.errorMessage}
                        </p>
                      )}
                      <div className="flex items-center justify-center gap-3">
                        {job.retryCount < 3 && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => retryJob(job.id)}
                            className="brand-font-body"
                          >
                            <RefreshCw className="w-4 h-4 mr-2" />
                            Retry
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => skipJob(job.id)}
                          className="brand-font-body text-gray-600"
                        >
                          Skip
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Bulk Download Options - Only show when complete */}
          {!isProcessing && successfulJobs.length > 0 && (
            <>
              {/* Divider */}
              <div className="my-12 border-t-2 border-gray-300"></div>

              {/* Minimal Download Section */}
              <Card className="brand-card">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold brand-text-neutral brand-font-heading mb-1">
                        Bulk Download
                      </h3>
                      <p className="text-sm text-gray-600 brand-font-body">
                        Download all {successfulJobs.length} enhanced images at once
                      </p>
                    </div>
                    <div className="flex gap-3">
                      <Button onClick={downloadAll} className="brand-button-primary brand-font-body">
                        <Archive className="w-4 h-4 mr-2" />
                        Download All as ZIP
                      </Button>
                      <Link href="/upload-enhance">
                        <Button variant="outline" className="brand-button-secondary brand-font-body">
                          <Upload className="w-4 h-4 mr-2" />
                          Enhance Another Image
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </div>

        {/* Sticky Footer */}
        <div className="sticky-footer p-4 shadow-lg">
          <div className="container mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-[#06B6D4]" />
                <span className="font-medium brand-text-neutral brand-font-body">
                  {isProcessing 
                    ? `Generation in progress... ${completedCount}/${jobs.length} complete`
                    : `✓ ${successfulJobs.length} enhancements ready`
                  }
                </span>
              </div>

              <div className="flex gap-3">
                <Link href="/">
                  <Button variant="outline" className="brand-button-secondary brand-font-body">
                    <ChevronLeft className="w-4 h-4 mr-2" />
                    Back to Home
                  </Button>
                </Link>

                <Link href="/upload-enhance">
                  <Button variant="outline" className="brand-button-secondary brand-font-body">
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Start Over
                  </Button>
                </Link>

                {!isProcessing && successfulJobs.length > 0 && (
                  <>
                  {/* Guest user signup prompt */}
                  {(!user || user === 'guest') && (
                    <div className="mb-6 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                      <div className="text-center">
                        <h3 className="text-xl font-bold text-gray-900 mb-2">
                          🎉 Your enhancement is ready!
                        </h3>
                        <p className="text-gray-700 mb-4">
                          Create a free account to save your results, get additional credits, and access your transformation history.
                        </p>
                        <div className="flex gap-3 justify-center">
                          <Button 
                            className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 font-semibold"
                            onClick={() => window.location.href = '/auth'}
                          >
                            Sign Up Free
                          </Button>
                          <Button 
                            variant="outline"
                            onClick={() => window.location.href = '/auth'}
                          >
                            Log In
                          </Button>
                        </div>
                        <p className="text-xs text-gray-600 mt-2">
                          Free account includes 1 monthly credit + access to all features
                        </p>
                      </div>
                    </div>
                  )}

                    <Button
                      onClick={downloadAll}
                      className="brand-button-primary brand-font-body font-medium"
                    >
                      <Archive className="w-4 h-4 mr-2" />
                      Download All
                    </Button>

                    <Link href="/upload-enhance">
                      <Button
                        variant="outline"
                        className="brand-button-secondary brand-font-body font-medium"
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        New Enhancement
                      </Button>
                    </Link>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Lightbox Modal */}
      {lightboxImage && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          onClick={() => setLightboxImage(null)}
        >
          <div className="relative max-w-4xl max-h-full">
            <img
              src={lightboxImage}
              alt="Full size preview"
              className="max-w-full max-h-full object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
            <button
              onClick={() => setLightboxImage(null)}
              className="absolute top-4 right-4 w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center text-white hover:bg-opacity-30 transition-all"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* Email Capture Modal */}
      <EmailCaptureModal
        isOpen={showEmailModal}
        onClose={() => setShowEmailModal(false)}
        onEmailSubmit={handleEmailSubmit}
        enhancementCount={jobs.filter(job => job.status === 'complete').length}
      />

      {/* Upgrade Prompt Modal */}
      <UpgradePrompt
        isOpen={showUpgradePrompt}
        onClose={handleUpgradeClose}
        onSignUp={handleSignUp}
        onViewPricing={handleViewPricing}
      />
    </>
  )
}