import React, { useState, useEffect } from 'react'
import { Link, useLocation } from 'wouter'
import Navbar from '@/components/Navbar'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Check, Clock, AlertCircle, RefreshCw, ChevronLeft, Sparkles, Zap, Download, ExternalLink, Share2 } from 'lucide-react'
import { EmailCaptureModal } from '@/components/EmailCaptureModal'
import { UpgradePrompt } from '@/components/UpgradePrompt'
import { useFreeCredits } from '@/hooks/useFreeCredits'

interface EnhancementJob {
  id: string
  productId: string
  originalImageUrl: string
  enhancementTitle: string
  enhancementPrompt: string
  status: 'queued' | 'creating_prompt' | 'generating_image' | 'complete' | 'failed'
  progress: number
  resultImageUrl?: string
  errorMessage?: string
  retryCount: number
  estimatedTime?: number
  startTime?: number
  isChaosMode?: boolean
  ideaDescription?: string
  fileName?: string
}

export default function GenerateEnhancementsPage() {
  const [, setLocation] = useLocation()
  const [jobs, setJobs] = useState<EnhancementJob[]>([])
  const [overallProgress, setOverallProgress] = useState(0)

  // Ensure page loads at top
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
  const [completedCount, setCompletedCount] = useState(0)
  const [failedCount, setFailedCount] = useState(0)
  const [estimatedTimeRemaining, setEstimatedTimeRemaining] = useState(0)
  const [isProcessing, setIsProcessing] = useState(isProcessing)
  const [currentJobIndex, setCurrentJobIndex] = useState(0)
  const [currentJobTimer, setCurrentJobTimer] = useState(0)
  const [currentJobMessage, setCurrentJobMessage] = useState('')
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [showUpgradePrompt, setShowUpgradePrompt] = useState(false)
  const [creditStatus, setCreditStatus] = useState<any>(null)

  // Integrated credit system
  const { checkUserCredits, useCredit, isAuthenticated } = useFreeCredits()

  // Load authentic selected enhancements from session storage
  useEffect(() => {
    const selectedEnhancements = JSON.parse(sessionStorage.getItem('selected_enhancements') || '[]');
    console.log('Generation page received:', selectedEnhancements);
    console.log('Enhancement data:', selectedEnhancements);
    console.log('First image URL:', selectedEnhancements[0]?.image_url);

    // Create jobs from authentic selected enhancements
    const enhancementJobs: EnhancementJob[] = [];

    selectedEnhancements.forEach((enhancement: any, index: number) => {
      enhancement.selected_ideas.forEach((idea: any, ideaIndex: number) => {
        // Check if this is a chaos concept (usually concept #5 or contains chaos indicators)
        const isChaosMode = idea.title.includes('Levitating') || 
                           idea.title.includes('Cosmic') || 
                           idea.title.includes('Infinite') ||
                           idea.description.includes('gravity-defying') ||
                           idea.description.includes('surreal');

        enhancementJobs.push({
          id: `job-${index}-${ideaIndex}`,
          productId: enhancement.image_id,
          originalImageUrl: enhancement.image_url,
          enhancementTitle: idea.title,
          enhancementPrompt: '', // Will be generated by Claude
          status: 'queued',
          progress: 0,
          retryCount: 0,
          estimatedTime: isChaosMode ? 90 : 60, // Chaos concepts take longer
          isChaosMode: isChaosMode,
          ideaDescription: idea.description,
          fileName: enhancement.fileName
        });
      });
    });

    console.log('Created enhancement jobs:', enhancementJobs);
    setJobs(enhancementJobs)

    // Check credits before starting (async)
    checkUserCredits().then(credits => {
      setCreditStatus(credits)
      if (!credits.hasCredits) {
        setShowUpgradePrompt(true)
        setIsProcessing(false)
        return
      }
    })

    // Start authentic AI processing
    setTimeout(() => {
      processEnhancements(enhancementJobs)
    }, 1000)
  }, [])

  // Real AI processing function that calls Claude + GPT-image-01
  const processEnhancements = async (initialJobs: EnhancementJob[]) => {
    console.log('Starting authentic AI processing for', initialJobs.length, 'enhancements');
    console.log('Initial jobs data:', initialJobs);
    setIsProcessing(true);

    if (!initialJobs || initialJobs.length === 0) {
      console.error('No jobs to process!');
      return;
    }

    const currentJobs = [...initialJobs];
    setJobs(currentJobs);

    console.log('About to start processing loop for', currentJobs.length, 'jobs');

    for (let i = 0; i < currentJobs.length; i++) {
      const job = currentJobs[i];
      console.log(`Processing job ${i + 1}/${currentJobs.length}:`, job.enhancementTitle);
      setCurrentJobIndex(i);
      setCurrentJobMessage(`[${job.enhancementTitle}] Step 1: Creating prompt with Claude...`);

      try {
        console.log('About to call Claude API for prompt generation...');
        // Step 1: Generate edit prompt with Claude
        currentJobs[i] = { ...currentJobs[i], status: 'creating_prompt', progress: 20 };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-edit-prompt...');
        const promptResponse = await fetch('/api/generate-edit-prompt', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            idea_title: job.enhancementTitle,
            idea_description: job.ideaDescription,
            is_chaos_concept: job.isChaosMode
          })
        });

        console.log('Fetch response received:', promptResponse.status, promptResponse.statusText);

        if (!promptResponse.ok) {
          const errorText = await promptResponse.text();
          console.error('Prompt API error response:', errorText);
          throw new Error(`Prompt generation failed: ${promptResponse.statusText} - ${errorText}`);
        }

        // Try to parse JSON with error handling
        let promptResult;
        try {
          const responseText = await promptResponse.text();
          console.log('Raw response text:', responseText);
          console.log('Response text length:', responseText.length);
          console.log('Response text preview:', responseText.substring(0, 200));

          promptResult = JSON.parse(responseText);
          console.log('JSON parsing successful');
        } catch (parseError) {
          console.error('JSON parsing failed:', parseError);
          console.error('Response that failed to parse:', await promptResponse.text());
          throw new Error(`Failed to parse response as JSON: ${parseError}`);
        }
        console.log('=== FRONTEND PROMPT RESPONSE ===');
        console.log('Response status:', promptResponse.status);
        console.log('Response headers:', promptResponse.headers);
        console.log('Full response:', JSON.stringify(promptResult, null, 2));
        console.log('Response type:', typeof promptResult);
        console.log('Has edit_prompt:', 'edit_prompt' in promptResult);
        console.log('Edit prompt:', promptResult.edit_prompt);
        console.log('Prompt length:', promptResult.edit_prompt?.length);
        console.log('Prompt type:', typeof promptResult.edit_prompt);
        console.log(`[${job.enhancementTitle}] Edit prompt received:`, promptResult.edit_prompt);

        // Validate that we got a proper edit prompt
        if (!promptResult.edit_prompt || promptResult.edit_prompt.trim().length === 0) {
          throw new Error(`No edit prompt received from Claude API. Response: ${JSON.stringify(promptResult)}`);
        }

        // Step 2: Generate image with GPT-image-01
        console.log('=== STARTING IMAGE GENERATION ===');
        console.log('About to call image generation API...');
        console.log('Original image URL:', job.originalImageUrl);
        console.log('Enhancement prompt:', promptResult.edit_prompt);
        console.log('Enhancement title:', job.enhancementTitle);

        setCurrentJobMessage(`[${job.enhancementTitle}] Step 2: Creating enhanced image...`);
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'generating_image', 
          progress: 60,
          enhancementPrompt: promptResult.edit_prompt
        };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-enhancement...');
        const imageResponse = await fetch('/api/generate-enhancement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            original_image_url: job.originalImageUrl,
            enhancement_prompt: promptResult.edit_prompt,
            enhancement_title: job.enhancementTitle
          })
        });

        if (!imageResponse.ok) {
          throw new Error(`Image generation failed: ${imageResponse.statusText}`);
        }

        const imageResult = await imageResponse.json();
        console.log(`[${job.enhancementTitle}] GPT-image-01 success!`, imageResult.enhanced_image_url);

        // Mark job as complete
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'complete', 
          progress: 100,
          resultImageUrl: imageResult.enhanced_image_url
        };
        setJobs([...currentJobs]);
        setCompletedCount(prev => prev + 1);

        // Brief pause between jobs
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`[${job.enhancementTitle}] Error:`, error);

        // Mark job as failed
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'failed', 
          errorMessage: error instanceof Error ? error.message : 'Unknown error'
        };
        setJobs([...currentJobs]);
        setFailedCount(prev => prev + 1);
      }
    }

    // All jobs complete
    setIsProcessing(false);
    setCurrentJobMessage('All enhancements complete!');
    console.log('Authentic AI processing complete!');

    // Auto-redirect for single enhancement after 3 seconds
    if (currentJobs.length === 1 && currentJobs[0].status === 'complete') {
      setTimeout(() => {
        setLocation('/results');
      }, 3000);
    }
  };

  const startAuthenticProcessing = async (initialJobs: EnhancementJob[]) => {
    console.log('Starting authentic AI processing for', initialJobs.length, 'enhancements');
    let currentJobs = [...initialJobs];

    for (let i = 0; i < currentJobs.length; i++) {
      const job = currentJobs[i];
      setCurrentJobIndex(i);

      try {
        // Step 1: Generate edit prompt with Claude
        console.log(`[${job.enhancementTitle}] Step 1: Creating prompt with Claude...`);
        setCurrentJobMessage(`Creating prompt for "${job.enhancementTitle}"...`);

        // Update job status to creating_prompt
        currentJobs[i] = { ...job, status: 'creating_prompt', progress: 25, startTime: Date.now() };
        setJobs([...currentJobs]);

        const promptResponse = await fetch('/api/generate-edit-prompt', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            idea_title: job.enhancementTitle,
            idea_description: job.ideaDescription,
            product_info: `${job.fileName} product`,
            is_chaos_concept: job.isChaosMode || false
          })
        });

        if (!promptResponse.ok) {
          throw new Error(`Prompt generation failed: ${promptResponse.statusText}`);
        }

        const promptResult = await promptResponse.json();
        console.log(`[${job.enhancementTitle}] Claude generated prompt:`, promptResult.edit_prompt);

        // Step 2: Generate image with GPT-image-01
        console.log(`[${job.enhancementTitle}] Step 2: Generating image with GPT-image-01...`);
        setCurrentJobMessage(`Generating "${job.enhancementTitle}" with AI...`);

        // Update job status to generating_image
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'generating_image', 
          progress: 60,
          enhancementPrompt: promptResult.edit_prompt
        };
        setJobs([...currentJobs]);

        const imageResponse = await fetch('/api/generate-enhancement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            original_image_url: job.originalImageUrl,
            enhancement_prompt: promptResult.edit_prompt,
            enhancement_title: job.enhancementTitle
          })
        });

        if (!imageResponse.ok) {
          throw new Error(`Image generation failed: ${imageResponse.statusText}`);
        }

        const imageResult = await imageResponse.json();
        console.log(`[${job.enhancementTitle}] GPT-image-01 success!`, imageResult.enhanced_image_url);

        // Mark job as complete
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'complete', 
          progress: 100,
          resultImageUrl: imageResult.enhanced_image_url
        };
        setJobs([...currentJobs]);
        setCompletedCount(prev => prev + 1);

        // Brief pause between jobs
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`[${job.enhancementTitle}] Error:`, error);

        // Mark job as failed
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'failed', 
          errorMessage: error instanceof Error ? error.message : 'Unknown error'
        };
        setJobs([...currentJobs]);
        setFailedCount(prev => prev + 1);
      }
    }

    // All jobs complete
    setIsProcessing(false);
    setCurrentJobMessage('All enhancements complete!');
    console.log('Authentic AI processing complete!');
  }

  const startProcessing = async (initialJobs: EnhancementJob[]) => {
    let currentJobs = [...initialJobs]

    for (let i = 0; i < currentJobs.length; i++) {
      // Start processing current job
      currentJobs[i] = { ...currentJobs[i], status: 'processing', startTime: Date.now() }
      setJobs([...currentJobs])

      // Simulate progress updates
      const success = await simulateJobProgress(currentJobs[i])

      // Update job status
      if (success) {
        currentJobs[i] = {
          ...currentJobs[i],
          status: 'complete',
          progress: 100,
          resultImageUrl: '/api/placeholder/400/400'
        }
        setCompletedCount(prev => prev + 1)
      } else {
        currentJobs[i] = {
          ...currentJobs[i],
          status: 'failed',
          errorMessage: 'Generation failed due to content complexity. Please try again.'
        }
        setFailedCount(prev => prev + 1)
      }

      setJobs([...currentJobs])
      setOverallProgress(((i + 1) / currentJobs.length) * 100)

      // Update estimated time remaining and current job info
      setCurrentJobIndex(i + 1)
      const remaining = currentJobs.length - (i + 1)
      const avgTime = 60 // seconds per enhancement
      setEstimatedTimeRemaining(remaining * avgTime)
    }

    // All jobs complete
    setIsProcessing(false)

    // Show email capture modal for guest users, or navigate directly for authenticated users
    if (!isAuthenticated && creditStatus?.requiresEmail) {
      setShowEmailModal(true)
    } else {
      // Auto-redirect after 2 seconds if all successful
      if (currentJobs.every(job => job.status === 'complete')) {
        setTimeout(() => {
          setLocation('/results')
        }, 2000)
      }
    }
  }

  const simulateJobProgress = (job: EnhancementJob): Promise<boolean> => {
    return new Promise((resolve) => {
      let progress = 0
      let timer = 0
      const messages = [
        'Analyzing your product details...',
        'Applying AI enhancement settings...',
        'Generating enhanced imagery...',
        'Optimizing image quality...',
        'Finalizing your enhancement...'
      ]

      const interval = setInterval(() => {
        timer += 1
        progress = (timer / 60) * 100 // 60 seconds = 100%

        // Update current job timer
        setCurrentJobTimer(timer)

        // Change message every 12 seconds
        const messageIndex = Math.floor(timer / 12)
        if (messageIndex < messages.length) {
          setCurrentJobMessage(messages[messageIndex])
        }

        if (progress >= 100) {
          clearInterval(interval)
          setCurrentJobMessage('Enhancement complete!')
          // 95% success rate for realistic demo
          resolve(Math.random() > 0.05)
        } else {
          setJobs(prevJobs => 
            prevJobs.map(j => 
              j.id === job.id ? { ...j, progress: Math.min(progress, 100) } : j
            )
          )
        }
      }, 1000) // Update every second for realistic timing
    })
  }

  const retryJob = async (jobId: string) => {
    const jobIndex = jobs.findIndex(j => j.id === jobId)
    if (jobIndex === -1 || jobs[jobIndex].retryCount >= 3) return

    const updatedJobs = [...jobs]
    updatedJobs[jobIndex] = {
      ...updatedJobs[jobIndex],
      status: 'processing',
      progress: 0,
      retryCount: updatedJobs[jobIndex].retryCount + 1,
      errorMessage: undefined
    }
    setJobs(updatedJobs)

    // Simulate retry
    const success = await simulateJobProgress(updatedJobs[jobIndex])

    if (success) {
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'complete',
        progress: 100,
        resultImageUrl: '/api/placeholder/400/400'
      }
      setCompletedCount(prev => prev + 1)
      setFailedCount(prev => prev - 1)
    } else {
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'failed',
        errorMessage: 'Generation failed again. This image may be too complex.'
      }
    }

    setJobs(updatedJobs)
  }

  const skipJob = (jobId: string) => {
    setJobs(prevJobs => 
      prevJobs.map(job => 
        job.id === jobId 
          ? { ...job, status: 'complete', progress: 100, resultImageUrl: undefined }
          : job
      )
    )
    setCompletedCount(prev => prev + 1)
    setFailedCount(prev => prev - 1)
  }

  // Handle email submission for guest users
  const handleEmailSubmit = async (email: string) => {
    try {
      // Use the credit and save email using your existing system
      await useCredit(email)

      // Close modal and redirect to results
      setShowEmailModal(false)
      setTimeout(() => {
        setLocation('/results')
      }, 500)
    } catch (error) {
      console.error('Failed to submit email:', error)
      throw new Error('Failed to save email. Please try again.')
    }
  }

  // Handle upgrade prompt actions
  const handleSignUp = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleViewPricing = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleUpgradeClose = () => {
    setShowUpgradePrompt(false)
    setLocation('/select-ideas')
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'queued':
        return <Clock className="w-4 h-4 text-gray-400" />
      case 'processing':
        return <RefreshCw className="w-4 h-4 text-blue-500 animate-spin" />
      case 'complete':
        return <Check className="w-4 h-4 text-green-500" />
      case 'failed':
        return <AlertCircle className="w-4 h-4 text-red-500" />
      default:
        return null
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'queued': return 'bg-gray-100 text-gray-600'
      case 'processing': return 'bg-blue-100 text-blue-600'
      case 'complete': return 'bg-green-100 text-green-600'
      case 'failed': return 'bg-red-100 text-red-600'
      default: return 'bg-gray-100 text-gray-600'
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const successfulJobs = jobs.filter(job => job.status === 'complete' && job.resultImageUrl)

  return (
    <>
      <style>{`
        :root {
          --primary: #0D7877;
          --secondary: #3DA5D9;
          --accent: #C1F50A;
          --neutral: #333333;
          --light: #F2F4F6;
        }

        .brand-bg-primary { background-color: var(--primary); }
        .brand-bg-secondary { background-color: var(--secondary); }
        .brand-bg-accent { background-color: var(--accent); }
        .brand-bg-light { background-color: var(--light); }

        .brand-text-primary { color: var(--primary); }
        .brand-text-secondary { color: var(--secondary); }
        .brand-text-neutral { color: var(--neutral); }

        .brand-border-primary { border-color: var(--primary); }
        .brand-border-secondary { border-color: var(--secondary); }

        .brand-button-primary {
          background-color: var(--primary);
          color: white;
        }
        .brand-button-primary:hover {
          background-color: #0a5d5f;
        }

        .brand-button-secondary {
          background-color: transparent;
          color: var(--primary);
          border: 2px solid var(--primary);
        }
        .brand-button-secondary:hover {
          background-color: var(--primary);
          color: white;
        }

        .brand-font-heading {
          font-family: 'Plus Jakarta Sans', sans-serif;
        }

        .brand-font-body {
          font-family: 'Montserrat', sans-serif;
        }

        .brand-card {
          background: white;
          border: 2px solid #e5e7eb;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .processing-gradient {
          background: linear-gradient(90deg, #3DA5D9 0%, #0D7877 50%, #3DA5D9 100%);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
          0% { background-position: -200% 0; }
          100% { background-position: 200% 0; }
        }

        .animate-shimmer {
          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
          animation: fadeIn 0.5s ease-out;
        }

        .sticky-footer {
          position: sticky;
          bottom: 0;
          background: white;
          border-top: 2px solid #e5e7eb;
          z-index: 10;
        }
      `}</style>

      <div className="min-h-screen brand-bg-light">
        <Navbar freeCredits={1} paidCredits={0} />

        {/* Progress Bar */}
        <div className="bg-white border-b-2 border-gray-200 sticky top-0 z-20">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between max-w-4xl mx-auto">
              {/* Step 1: Upload */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Upload</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#0D7877] rounded"></div>

              {/* Step 2: Ideas Selection */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Ideas Selection</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#0D7877] rounded"></div>

              {/* Step 3: Generate - ACTIVE */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold">
                  3
                </div>
                <span className="ml-2 text-sm font-medium text-[#0D7877] brand-font-body">Generate</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-gray-300 rounded"></div>

              {/* Step 4: Download */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-300 text-gray-600 text-sm font-semibold">
                  4
                </div>
                <span className="ml-2 text-sm font-medium text-gray-500 brand-font-body">Download</span>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="container mx-auto px-4 py-8 pb-32">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold mb-4 brand-text-neutral brand-font-heading">
              Creating Your Enhanced Images
            </h1>
            <p className="text-lg text-gray-600 brand-font-body max-w-3xl mx-auto mb-2">
              Our AI is working on your selected enhancements. Each enhancement takes approximately 60 seconds to complete.
            </p>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-2xl mx-auto">
              <p className="text-blue-800 brand-font-body text-sm">
                ⚠️ Please don't close this tab - your images are being created. We'll notify you when complete!
              </p>
            </div>
          </div>

          {/* Overall Progress */}
          <Card className="brand-card mb-8">
            <CardContent className="p-8">
              {isProcessing ? (
                <div className="text-center">
                  {/* Circular Progress Indicator */}
                  <div className="relative mx-auto mb-6">
                    <div className="w-[120px] h-[120px] mx-auto">
                      <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                        {/* Background circle */}
                        <circle
                          cx="50"
                          cy="50"
                          r="45"
                          stroke="#e5e7eb"
                          strokeWidth="6"
                          fill="none"
                        />
                        {/* Progress circle */}
                        <circle
                          cx="50"
                          cy="50"
                          r="45"
                          stroke="#0D7877"
                          strokeWidth="6"
                          fill="none"
                          strokeLinecap="round"
                          strokeDasharray={`${overallProgress * 2.83} 283`}
                          className="transition-all duration-500 ease-out"
                          style={{
                            filter: 'drop-shadow(0 0 6px rgba(13, 120, 119, 0.3))'
                          }}
                        />
                      </svg>
                      {/* Percentage in center */}
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-2xl font-bold text-[#0D7877] brand-font-heading">
                          {Math.round(overallProgress)}%
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Currently Processing Section */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 brand-font-heading">
                      Currently Processing
                    </h3>

                    {/* Current Job Display */}
                    {jobs[currentJobIndex] && (
                      <div className="flex items-center justify-center gap-6 mb-4">
                        {/* Original Image Thumbnail */}
                        <div className="text-center">
                          <img
                            src={jobs[currentJobIndex].originalImageUrl}
                            alt="Original"
                            className="w-[150px] h-[150px] object-cover rounded-lg border-2 border-gray-200 shadow-md"
                          />
                          <p className="text-sm text-gray-600 mt-2 brand-font-body">Original</p>
                        </div>

                        {/* Animated Arrow */}
                        <div className="flex flex-col items-center">
                          <div className="w-12 h-12 rounded-full bg-[#0D7877] flex items-center justify-center animate-pulse">
                            <span className="text-white text-xl">↓</span>
                          </div>
                        </div>

                        {/* Loading Spinner with Preview */}
                        <div className="text-center">
                          <div className="w-[150px] h-[150px] bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center relative overflow-hidden">
                            {/* Animated Background */}
                            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer"></div>

                            {/* Loading Spinner */}
                            <div className="relative z-10">
                              <RefreshCw className="w-8 h-8 text-[#0D7877] animate-spin mb-2" />
                              <div className="text-xs text-gray-600 brand-font-body">Processing...</div>
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 mt-2 brand-font-body">Enhanced</p>
                        </div>
                      </div>
                    )}

                    {/* Enhancement Details */}
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                      <p className="text-blue-800 brand-font-body font-medium mb-2">
                        Creating "{jobs[currentJobIndex]?.enhancementTitle}"
                      </p>
                      <p className="text-blue-700 brand-font-body text-sm">
                        {jobs[currentJobIndex]?.status === 'creating_prompt' 
                          ? 'Step 1 of 2: Analyzing requirements with Claude...'
                          : 'Step 2 of 2: Applying effects with GPT-Image-01...'
                        }
                      </p>
                    </div>

                    {/* Time Estimation */}
                    <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-center gap-2 mb-2">
                        <Clock className="w-5 h-5 text-gray-600" />
                        <span className="text-gray-800 brand-font-body font-medium">
                          Completes in ~{60 - currentJobTimer} seconds
                        </span>
                      </div>

                      {/* Live Countdown Bar */}
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-[#0D7877] h-2 rounded-full transition-all duration-1000 ease-linear"
                          style={{ width: `${(currentJobTimer / 60) * 100}%` }}
                        ></div>
                      </div>

                      <div className="flex justify-between text-xs text-gray-500 mt-2 brand-font-body">
                        <span>Processing enhancement {currentJobIndex + 1} of {jobs.length}</span>
                        <span>{completedCount} completed, {jobs.length - completedCount - failedCount - 1} waiting</span>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                /* Completion State */
                <div className="text-center">
                  <div className="w-[120px] h-[120px] mx-auto mb-4 flex items-center justify-center bg-green-100 rounded-full">
                    <Check className="w-12 h-12 text-green-600" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-800 mb-2 brand-font-heading">
                    All Enhancements Complete!
                  </h3>
                  <p className="text-gray-600 brand-font-body">
                    {completedCount} of {jobs.length} enhancements generated successfully
                    {failedCount > 0 && ` (${failedCount} failed)`}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Individual Job Cards */}
          <div className="space-y-6">
            {jobs.map((job) => (
              <Card key={job.id} className={`brand-card transition-all duration-500 ${job.status === 'complete' ? 'animate-fade-in' : ''}`}>
                <CardContent className="p-6">
                  {/* Header */}
                  <div className="flex items-center justify-center gap-3 mb-6">
                    {getStatusIcon(job.status)}
                    <h3 className="text-xl font-semibold brand-text-neutral brand-font-heading">
                      {job.enhancementTitle}
                    </h3>
                    <Badge className={`text-sm ${getStatusColor(job.status)}`}>
                      {job.status === 'queued' && 'Waiting...'}
                      {job.status === 'creating_prompt' && 'Creating Prompt...'}
                      {job.status === 'generating_image' && 'Generating...'}
                      {job.status === 'complete' && 'Complete!'}
                      {job.status === 'failed' && 'Failed'}
                    </Badge>
                  </div>

                  {/* Progress Bar for Processing */}
                  {(job.status === 'creating_prompt' || job.status === 'generating_image') && (
                    <div className="mb-6">
                      <Progress 
                        value={job.progress} 
                        className="h-3 processing-gradient"
                      />
                      <p className="text-sm text-center text-gray-600 mt-2 brand-font-body">
                        {job.status === 'creating_prompt' ? 'Claude is analyzing your request...' : 'GPT-Image-01 is creating your enhancement...'}
                      </p>
                    </div>
                  )}

                  {/* Image Container - Centered */}
                  <div className="flex items-center justify-center gap-8 mb-6">
                    {/* Before Image */}
                    <div className="text-center">
                      <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">Before</p>
                      <img
                        src={job.originalImageUrl}
                        alt="Original product"
                        className="w-[250px] h-[250px] object-cover rounded-lg border-2 border-gray-200 cursor-pointer hover:border-[#0D7877] transition-colors"
                        onClick={() => window.open(job.originalImageUrl, '_blank')}
                      />
                    </div>

                    {/* Arrow */}
                    <div className="flex flex-col items-center">
                      <div className="w-12 h-12 rounded-full bg-[#0D7877] flex items-center justify-center">
                        <span className="text-white text-xl">→</span>
                      </div>
                    </div>

                    {/* After Image */}
                    <div className="text-center">
                      <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">After</p>
                      {job.status === 'complete' && job.resultImageUrl ? (
                        <img
                          src={job.resultImageUrl}
                          alt="Enhanced result"
                          className="w-[250px] h-[250px] object-cover rounded-lg border-2 border-green-200 cursor-pointer hover:border-green-400 transition-colors"
                          onClick={() => window.open(job.resultImageUrl, '_blank')}
                        />
                      ) : (
                        <div className="w-[250px] h-[250px] bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center">
                          <div className="text-center">
                            {job.status === 'failed' ? (
                              <div className="text-red-500">
                                <AlertCircle className="w-8 h-8 mx-auto mb-2" />
                                <p className="text-sm">Enhancement Failed</p>
                              </div>
                            ) : (
                              <div className="text-gray-400">
                                <RefreshCw className={`w-8 h-8 mx-auto mb-2 ${job.status !== 'queued' ? 'animate-spin' : ''}`} />
                                <p className="text-sm">
                                  {job.status === 'queued' ? 'Waiting...' : 'Processing...'}
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Action Buttons - Centered */}
                  {job.status === 'complete' && job.resultImageUrl && (
                    <div className="flex items-center justify-center gap-4">
                      <Button
                        onClick={() => {
                          const link = document.createElement('a')
                          link.href = job.resultImageUrl!
                          link.download = `${job.enhancementTitle.replace(/\s+/g, '-')}-enhanced.png`
                          link.click()
                        }}
                        className="brand-button-primary brand-font-body"
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download Enhanced
                      </Button>

                      <Button
                        variant="outline"
                        onClick={() => window.open(job.resultImageUrl, '_blank')}
                        className="brand-button-secondary brand-font-body"
                      >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        View Full Size
                      </Button>

                      <Button
                        variant="outline"
                        onClick={() => {
                          if (navigator.share) {
                            navigator.share({
                              title: `${job.enhancementTitle} - Enhanced Image`,
                              text: 'Check out this AI-enhanced product image!',
                              url: job.resultImageUrl
                            })
                          } else {
                            navigator.clipboard.writeText(job.resultImageUrl!)
                            // You could add a toast notification here
                          }
                        }}
                        className="brand-button-secondary brand-font-body"
                      >
                        <Share2 className="w-4 h-4 mr-2" />
                        Share
                      </Button>
                    </div>
                  )}

                  {/* Error Handling */}
                  {job.status === 'failed' && (
                    <div className="text-center">
                      {job.errorMessage && (
                        <p className="text-sm text-red-600 mb-4 brand-font-body">
                          {job.errorMessage}
                        </p>
                      )}
                      <div className="flex items-center justify-center gap-3">
                        {job.retryCount < 3 && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => retryJob(job.id)}
                            className="brand-font-body"
                          >
                            <RefreshCw className="w-4 h-4 mr-2" />
                            Retry Enhancement
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => skipJob(job.id)}
                          className="brand-font-body text-gray-600"
                        >
                          Skip This Enhancement
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Sticky Footer */}
        <div className="sticky-footer p-4 shadow-lg">
          <div className="container mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-[#0D7877]" />
                <span className="font-medium brand-text-neutral brand-font-body">
                  {isProcessing ? 'Generation in progress...' : 'Generation complete!'}
                </span>
              </div>

              <div className="flex gap-3">
                <Link href="/select-ideas">
                  <Button variant="outline" className="brand-button-secondary brand-font-body">
                    <ChevronLeft className="w-4 h-4 mr-2" />
                    Back to Ideas
                  </Button>
                </Link>

                {!isProcessing && (
                  <Button
                    onClick={() => setLocation('/results')}
                    disabled={successfulJobs.length === 0}
                    className={`brand-font-body font-medium ${
                      successfulJobs.length > 0 ? 'brand-button-primary' : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    }`}
                  >
                    {successfulJobs.length === jobs.length 
                      ? 'View All Results' 
                      : `Continue with ${successfulJobs.length} Successful Enhancements`}
                    <Sparkles className="w-4 h-4 ml-2" />
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Email Capture Modal */}
      <EmailCaptureModal
        isOpen={showEmailModal}
        onClose={() => setShowEmailModal(false)}
        onEmailSubmit={handleEmailSubmit}
        enhancementCount={jobs.filter(job => job.status === 'complete').length}
      />

      {/* Upgrade Prompt Modal */}
      <UpgradePrompt
        isOpen={showUpgradePrompt}
        onClose={handleUpgradeClose}
        onSignUp={handleSignUp}
        onViewPricing={handleViewPricing}
      />
    </>
  )
}