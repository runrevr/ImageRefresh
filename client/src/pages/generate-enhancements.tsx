import React, { useState, useEffect } from 'react'
import { Link, useLocation } from 'wouter'
import Navbar from '@/components/Navbar'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Check, 
  Clock, 
  AlertCircle, 
  RefreshCw, 
  ChevronLeft, 
  Sparkles, 
  Zap, 
  Download, 
  ExternalLink, 
  Share2,
  Star,
  StarOff,
  Mail,
  Upload,
  Archive
} from 'lucide-react'
import { EmailCaptureModal } from '@/components/EmailCaptureModal'
import { UpgradePrompt } from '@/components/UpgradePrompt'
import { useFreeCredits } from '@/hooks/useFreeCredits'

interface EnhancementJob {
  id: string
  productId: string
  originalImageUrl: string
  enhancementTitle: string
  enhancementPrompt: string
  status: 'queued' | 'creating_prompt' | 'generating_image' | 'complete' | 'failed'
  progress: number
  resultImageUrl?: string
  errorMessage?: string
  retryCount: number
  estimatedTime?: number
  startTime?: number
  isChaosMode?: boolean
  ideaDescription?: string
  fileName?: string
  isFavorite?: boolean
}

export default function GenerateEnhancementsPage() {
  const [, setLocation] = useLocation()
  const [jobs, setJobs] = useState<EnhancementJob[]>([])
  const [overallProgress, setOverallProgress] = useState(0)

  // Ensure page loads at top
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);
  const [completedCount, setCompletedCount] = useState(0)
  const [failedCount, setFailedCount] = useState(0)
  const [estimatedTimeRemaining, setEstimatedTimeRemaining] = useState(0)
  const [isProcessing, setIsProcessing] = useState(true)
  const [currentJobIndex, setCurrentJobIndex] = useState(0)
  const [currentJobTimer, setCurrentJobTimer] = useState(0)
  const [currentJobMessage, setCurrentJobMessage] = useState('')
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [showUpgradePrompt, setShowUpgradePrompt] = useState(false)
  const [creditStatus, setCreditStatus] = useState<any>(null)
  const [showCelebration, setShowCelebration] = useState(false)

  // Download options
  const [selectedFormat, setSelectedFormat] = useState<'PNG' | 'JPG'>('PNG')
  const [selectedResolution, setSelectedResolution] = useState<'original' | 'hd' | '4k'>('original')
  const [emailAddress, setEmailAddress] = useState('')

  // Integrated credit system
  const { checkUserCredits, useCredit, isAuthenticated } = useFreeCredits()

  // Load authentic selected enhancements from session storage
  useEffect(() => {
    const selectedEnhancements = JSON.parse(sessionStorage.getItem('selected_enhancements') || '[]');
    console.log('Generation page received:', selectedEnhancements);
    console.log('Enhancement data:', selectedEnhancements);
    console.log('First image URL:', selectedEnhancements[0]?.image_url);

    // Create jobs from authentic selected enhancements
    const enhancementJobs: EnhancementJob[] = [];

    selectedEnhancements.forEach((enhancement: any, index: number) => {
      enhancement.selected_ideas.forEach((idea: any, ideaIndex: number) => {
        // Check if this is a chaos concept (usually concept #5 or contains chaos indicators)
        const isChaosMode = idea.title.includes('Levitating') || 
                           idea.title.includes('Cosmic') || 
                           idea.title.includes('Infinite') ||
                           idea.description.includes('gravity-defying') ||
                           idea.description.includes('surreal');

        enhancementJobs.push({
          id: `job-${index}-${ideaIndex}`,
          productId: enhancement.image_id,
          originalImageUrl: enhancement.image_url,
          enhancementTitle: idea.title,
          enhancementPrompt: '', // Will be generated by Claude
          status: 'queued',
          progress: 0,
          retryCount: 0,
          estimatedTime: isChaosMode ? 90 : 60, // Chaos concepts take longer
          isChaosMode: isChaosMode,
          ideaDescription: idea.description,
          fileName: enhancement.fileName,
          isFavorite: false
        });
      });
    });

    console.log('Created enhancement jobs:', enhancementJobs);
    setJobs(enhancementJobs)

    // Check credits before starting (async)
    checkUserCredits().then(credits => {
      setCreditStatus(credits)
      if (!credits.hasCredits) {
        setShowUpgradePrompt(true)
        setIsProcessing(false)
        return
      }
    })

    // Start authentic AI processing
    setTimeout(() => {
      processEnhancements(enhancementJobs)
    }, 1000)
  }, [])

  // Real AI processing function that calls Claude + GPT-image-01
  const processEnhancements = async (initialJobs: EnhancementJob[]) => {
    console.log('Starting authentic AI processing for', initialJobs.length, 'enhancements');
    console.log('Initial jobs data:', initialJobs);
    setIsProcessing(true);

    if (!initialJobs || initialJobs.length === 0) {
      console.error('No jobs to process!');
      return;
    }

    const currentJobs = [...initialJobs];
    setJobs(currentJobs);

    console.log('About to start processing loop for', currentJobs.length, 'jobs');

    for (let i = 0; i < currentJobs.length; i++) {
      const job = currentJobs[i];
      console.log(`Processing job ${i + 1}/${currentJobs.length}:`, job.enhancementTitle);
      setCurrentJobIndex(i);
      setCurrentJobMessage(`[${job.enhancementTitle}] Step 1: Creating prompt with Claude...`);

      try {
        console.log('About to call Claude API for prompt generation...');
        // Step 1: Generate edit prompt with Claude
        currentJobs[i] = { ...currentJobs[i], status: 'creating_prompt', progress: 20 };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-edit-prompt...');
        const promptResponse = await fetch('/api/generate-edit-prompt', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            idea_title: job.enhancementTitle,
            idea_description: job.ideaDescription,
            is_chaos_concept: job.isChaosMode
          })
        });

        console.log('Fetch response received:', promptResponse.status, promptResponse.statusText);

        if (!promptResponse.ok) {
          const errorText = await promptResponse.text();
          console.error('Prompt API error response:', errorText);
          throw new Error(`Prompt generation failed: ${promptResponse.statusText} - ${errorText}`);
        }

        // Try to parse JSON with error handling
        let promptResult;
        try {
          const responseText = await promptResponse.text();
          console.log('Raw response text:', responseText);
          console.log('Response text length:', responseText.length);
          console.log('Response text preview:', responseText.substring(0, 200));

          promptResult = JSON.parse(responseText);
          console.log('JSON parsing successful');
        } catch (parseError) {
          console.error('JSON parsing failed:', parseError);
          console.error('Response that failed to parse:', await promptResponse.text());
          throw new Error(`Failed to parse response as JSON: ${parseError}`);
        }
        console.log('=== FRONTEND PROMPT RESPONSE ===');
        console.log('Response status:', promptResponse.status);
        console.log('Response headers:', promptResponse.headers);
        console.log('Full response:', JSON.stringify(promptResult, null, 2));
        console.log('Response type:', typeof promptResult);
        console.log('Has edit_prompt:', 'edit_prompt' in promptResult);
        console.log('Edit prompt:', promptResult.edit_prompt);
        console.log('Prompt length:', promptResult.edit_prompt?.length);
        console.log('Prompt type:', typeof promptResult.edit_prompt);
        console.log(`[${job.enhancementTitle}] Edit prompt received:`, promptResult.edit_prompt);

        // Validate that we got a proper edit prompt
        if (!promptResult.edit_prompt || promptResult.edit_prompt.trim().length === 0) {
          throw new Error(`No edit prompt received from Claude API. Response: ${JSON.stringify(promptResult)}`);
        }

        // Step 2: Generate image with GPT-image-01
        console.log('=== STARTING IMAGE GENERATION ===');
        console.log('About to call image generation API...');
        console.log('Original image URL:', job.originalImageUrl);
        console.log('Enhancement prompt:', promptResult.edit_prompt);
        console.log('Enhancement title:', job.enhancementTitle);

        setCurrentJobMessage(`[${job.enhancementTitle}] Step 2: Creating enhanced image...`);
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'generating_image', 
          progress: 60,
          enhancementPrompt: promptResult.edit_prompt
        };
        setJobs([...currentJobs]);

        console.log('Making fetch request to /api/generate-enhancement...');
        const imageResponse = await fetch('/api/generate-enhancement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            original_image_url: job.originalImageUrl,
            enhancement_prompt: promptResult.edit_prompt,
            enhancement_title: job.enhancementTitle
          })
        });

        if (!imageResponse.ok) {
          throw new Error(`Image generation failed: ${imageResponse.statusText}`);
        }

        const imageResult = await imageResponse.json();
        console.log(`[${job.enhancementTitle}] GPT-image-01 success!`, imageResult.enhanced_image_url);

        // Mark job as complete
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'complete', 
          progress: 100,
          resultImageUrl: imageResult.enhanced_image_url
        };
        setJobs([...currentJobs]);
        setCompletedCount(prev => prev + 1);

        // Brief pause between jobs
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`[${job.enhancementTitle}] Error:`, error);

        // Mark job as failed
        currentJobs[i] = { 
          ...currentJobs[i], 
          status: 'failed', 
          errorMessage: error instanceof Error ? error.message : 'Unknown error'
        };
        setJobs([...currentJobs]);
        setFailedCount(prev => prev + 1);
      }
    }

    // All jobs complete
    setIsProcessing(false);
    setCurrentJobMessage('All enhancements complete!');
    setShowCelebration(true);
    console.log('Authentic AI processing complete!');

    // Hide celebration after 5 seconds
    setTimeout(() => setShowCelebration(false), 5000);
  };

  const retryJob = async (jobId: string) => {
    const jobIndex = jobs.findIndex(j => j.id === jobId)
    if (jobIndex === -1 || jobs[jobIndex].retryCount >= 3) return

    const updatedJobs = [...jobs]
    updatedJobs[jobIndex] = {
      ...updatedJobs[jobIndex],
      status: 'creating_prompt',
      progress: 0,
      retryCount: updatedJobs[jobIndex].retryCount + 1,
      errorMessage: undefined
    }
    setJobs(updatedJobs)

    // Re-run the actual processing for this job
    try {
      const job = updatedJobs[jobIndex];

      // Step 1: Generate edit prompt with Claude
      const promptResponse = await fetch('/api/generate-edit-prompt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          idea_title: job.enhancementTitle,
          idea_description: job.ideaDescription,
          is_chaos_concept: job.isChaosMode
        })
      });

      if (!promptResponse.ok) {
        throw new Error(`Prompt generation failed: ${promptResponse.statusText}`);
      }

      const promptResult = await promptResponse.json();

      // Update to generating image status
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'generating_image',
        progress: 60,
        enhancementPrompt: promptResult.edit_prompt
      };
      setJobs([...updatedJobs]);

      // Step 2: Generate image
      const imageResponse = await fetch('/api/generate-enhancement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          original_image_url: job.originalImageUrl,
          enhancement_prompt: promptResult.edit_prompt,
          enhancement_title: job.enhancementTitle
        })
      });

      if (!imageResponse.ok) {
        throw new Error(`Image generation failed: ${imageResponse.statusText}`);
      }

      const imageResult = await imageResponse.json();

      // Mark as complete
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'complete',
        progress: 100,
        resultImageUrl: imageResult.enhanced_image_url
      };
      setJobs([...updatedJobs]);
      setCompletedCount(prev => prev + 1);
      setFailedCount(prev => prev - 1);

    } catch (error) {
      updatedJobs[jobIndex] = {
        ...updatedJobs[jobIndex],
        status: 'failed',
        errorMessage: error instanceof Error ? error.message : 'Unknown error'
      };
      setJobs([...updatedJobs]);
    }
  }

  const skipJob = (jobId: string) => {
    setJobs(prevJobs => 
      prevJobs.map(job => 
        job.id === jobId 
          ? { ...job, status: 'complete', progress: 100, resultImageUrl: undefined }
          : job
      )
    )
    setCompletedCount(prev => prev + 1)
    setFailedCount(prev => prev - 1)
  }

  const toggleFavorite = (jobId: string) => {
    setJobs(prevJobs => 
      prevJobs.map(job => 
        job.id === jobId ? { ...job, isFavorite: !job.isFavorite } : job
      )
    )
  }

  const downloadImage = (imageUrl: string, filename: string, format: string = selectedFormat) => {
    const link = document.createElement('a')
    link.href = imageUrl
    link.download = `${filename.replace(/\s+/g, '-')}.${format.toLowerCase()}`
    link.click()
  }

  const downloadAll = () => {
    const successfulJobs = jobs.filter(job => job.status === 'complete' && job.resultImageUrl)
    successfulJobs.forEach((job, index) => {
      setTimeout(() => {
        downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)
      }, index * 500) // Stagger downloads
    })
  }

  const downloadFavorites = () => {
    const favorites = jobs.filter(job => job.isFavorite && job.resultImageUrl)
    favorites.forEach((job, index) => {
      setTimeout(() => {
        downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)
      }, index * 500)
    })
  }

  const emailResults = () => {
    if (!emailAddress) return
    console.log(`Emailing results to ${emailAddress}`)
    // In production, would call API to send email
  }

  const shareResult = (job: EnhancementJob) => {
    if (!job.resultImageUrl) return

    if (navigator.share) {
      navigator.share({
        title: `${job.enhancementTitle} - Enhanced Image`,
        text: 'Check out this AI-enhanced product image!',
        url: job.resultImageUrl
      })
    } else {
      navigator.clipboard.writeText(job.resultImageUrl)
      // You could add a toast notification here
    }
  }

  // Handle email submission for guest users
  const handleEmailSubmit = async (email: string) => {
    try {
      // Use the credit and save email using your existing system
      await useCredit(email)

      // Close modal and redirect to results
      setShowEmailModal(false)
    } catch (error) {
      console.error('Failed to submit email:', error)
      throw new Error('Failed to save email. Please try again.')
    }
  }

  // Handle upgrade prompt actions
  const handleSignUp = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleViewPricing = () => {
    setShowUpgradePrompt(false)
    setLocation('/pricing')
  }

  const handleUpgradeClose = () => {
    setShowUpgradePrompt(false)
    setLocation('/select-ideas')
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'queued':
        return <Clock className="w-4 h-4 text-gray-400" />
      case 'creating_prompt':
      case 'generating_image':
        return <RefreshCw className="w-4 h-4 text-blue-500 animate-spin" />
      case 'complete':
        return <Check className="w-4 h-4 text-green-500" />
      case 'failed':
        return <AlertCircle className="w-4 h-4 text-red-500" />
      default:
        return null
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'queued': return 'bg-gray-100 text-gray-600'
      case 'creating_prompt': return 'bg-blue-100 text-blue-600'
      case 'generating_image': return 'bg-blue-100 text-blue-600'
      case 'complete': return 'bg-green-100 text-green-600'
      case 'failed': return 'bg-red-100 text-red-600'
      default: return 'bg-gray-100 text-gray-600'
    }
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const successfulJobs = jobs.filter(job => job.status === 'complete' && job.resultImageUrl)
  const favoriteCount = jobs.filter(job => job.isFavorite).length

  return (
    <>
      <style>{`
        :root {
          --primary: #0D7877;
          --secondary: #3DA5D9;
          --accent: #C1F50A;
          --neutral: #333333;
          --light: #F2F4F6;
        }

        .brand-bg-primary { background-color: var(--primary); }
        .brand-bg-secondary { background-color: var(--secondary); }
        .brand-bg-accent { background-color: var(--accent); }
        .brand-bg-light { background-color: var(--light); }

        .brand-text-primary { color: var(--primary); }
        .brand-text-secondary { color: var(--secondary); }
        .brand-text-neutral { color: var(--neutral); }

        .brand-border-primary { border-color: var(--primary); }
        .brand-border-secondary { border-color: var(--secondary); }

        .brand-button-primary {
          background-color: var(--primary);
          color: white;
        }
        .brand-button-primary:hover {
          background-color: #0a5d5f;
        }

        .brand-button-secondary {
          background-color: transparent;
          color: var(--primary);
          border: 2px solid var(--primary);
        }
        .brand-button-secondary:hover {
          background-color: var(--primary);
          color: white;
        }

        .brand-font-heading {
          font-family: 'Plus Jakarta Sans', sans-serif;
        }

        .brand-font-body {
          font-family: 'Montserrat', sans-serif;
        }

        .brand-card {
          background: white;
          border: 2px solid #e5e7eb;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .processing-gradient {
          background: linear-gradient(90deg, #3DA5D9 0%, #0D7877 50%, #3DA5D9 100%);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
          0% { background-position: -200% 0; }
          100% { background-position: 200% 0; }
        }

        .animate-shimmer {
          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
          animation: fadeIn 0.5s ease-out;
        }

        .sticky-footer {
          position: sticky;
          bottom: 0;
          background: white;
          border-top: 2px solid #e5e7eb;
          z-index: 10;
        }

        .confetti {
          position: absolute;
          width: 10px;
          height: 10px;
          background: var(--accent);
          animation: confetti-fall 3s linear infinite;
        }

        @keyframes confetti-fall {
          to {
            transform: translateY(100vh) rotate(360deg);
          }
        }

        .celebration-pulse {
          animation: celebration-pulse 2s ease-in-out infinite;
        }

        @keyframes celebration-pulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }

        /* Image Comparison Styles */
        .image-comparison-container {
          position: relative;
          overflow: hidden;
        }

        .before-image {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .after-image {
          position: relative;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      `}</style>

      <div className="min-h-screen brand-bg-light">
        <Navbar freeCredits={1} paidCredits={0} />

        {/* Celebration Confetti */}
        {showCelebration && (
          <div className="fixed inset-0 pointer-events-none z-30">
            {[...Array(20)].map((_, i) => (
              <div 
                key={i}
                className="confetti"
                style={{
                  left: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 3}s`,
                  backgroundColor: i % 3 === 0 ? '#C1F50A' : i % 3 === 1 ? '#3DA5D9' : '#0D7877'
                }}
              />
            ))}
          </div>
        )}

        {/* Progress Bar */}
        <div className="bg-white border-b-2 border-gray-200 sticky top-0 z-20">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between max-w-4xl mx-auto">
              {/* Step 1: Upload */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Upload</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#0D7877] rounded"></div>

              {/* Step 2: Ideas Selection */}
              <div className="flex items-center">
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold">
                  <Check className="w-4 h-4" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 brand-font-body">Ideas Selection</span>
              </div>

              <div className="flex-1 mx-4 h-1 bg-[#0D7877] rounded"></div>

              {/* Step 3: Generate & Download - ACTIVE */}
              <div className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full bg-[#0D7877] text-white text-sm font-semibold ${!isProcessing && showCelebration ? 'celebration-pulse' : ''}`}>
                  {isProcessing ? '3' : <Check className="w-4 h-4" />}
                </div>
                <span className="ml-2 text-sm font-medium text-[#0D7877] brand-font-body">
                  {isProcessing ? 'Generate' : 'Complete!'}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="container mx-auto px-4 py-8 pb-32">
          {/* Header */}
          <div className="text-center mb-8">
            {isProcessing ? (
              <>
                <h1 className="text-4xl font-bold mb-4 brand-text-neutral brand-font-heading">
                  Creating Your Enhanced Images
                </h1>
                <p className="text-lg text-gray-600 brand-font-body max-w-3xl mx-auto mb-2">
                  Our AI is working on your selected enhancements. Each enhancement takes approximately 60 seconds to complete.
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-2xl mx-auto">
                  <p className="text-blue-800 brand-font-body text-sm">
                    ⚠️ Please don't close this tab - your images are being created. We'll notify you when complete!
                  </p>
                </div>
              </>
            ) : (
              <>
                <div className={`mb-6 ${showCelebration ? 'celebration-pulse' : ''}`}>
                  <div className="w-[120px] h-[120px] mx-auto mb-4 flex items-center justify-center bg-green-100 rounded-full">
                    <Sparkles className="w-12 h-12 text-[#C1F50A]" />
                  </div>
                  <h1 className="text-4xl font-bold mb-4 brand-text-neutral brand-font-heading">
                    ✨ All Enhancements Complete!
                  </h1>
                  <p className="text-lg text-gray-600 brand-font-body max-w-3xl mx-auto">
                    Your enhanced images are ready! Download individual images or get them all at once.
                  </p>
                  <div className="flex items-center justify-center gap-2 mt-4">
                    <Check className="w-5 h-5 text-green-500" />
                    <span className="font-semibold text-[#0D7877] brand-font-body">
                      {successfulJobs.length} of {jobs.length} enhancements generated successfully
                      {failedCount > 0 && ` (${failedCount} failed)`}
                    </span>
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Overall Progress - Only show while processing */}
          {isProcessing && (
            <Card className="brand-card mb-8">
              <CardContent className="p-8">
                <div className="text-center">
                  {/* Circular Progress Indicator */}
                  <div className="relative mx-auto mb-6">
                    <div className="w-[120px] h-[120px] mx-auto">
                      <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                        {/* Background circle */}
                        <circle
                          cx="50"
                          cy="50"
                          r="45"
                          stroke="#e5e7eb"
                          strokeWidth="6"
                          fill="none"
                        />
                        {/* Progress circle */}
                        <circle
                          cx="50"
                          cy="50"
                          r="45"
                          stroke="#0D7877"
                          strokeWidth="6"
                          fill="none"
                          strokeLinecap="round"
                          strokeDasharray={`${overallProgress * 2.83} 283`}
                          className="transition-all duration-500 ease-out"
                          style={{
                            filter: 'drop-shadow(0 0 6px rgba(13, 120, 119, 0.3))'
                          }}
                        />
                      </svg>
                      {/* Percentage in center */}
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-2xl font-bold text-[#0D7877] brand-font-heading">
                          {Math.round(overallProgress)}%
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Currently Processing Section */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 brand-font-heading">
                      Currently Processing
                    </h3>

                    {/* Current Job Display */}
                    {jobs[currentJobIndex] && (
                      <div className="flex items-center justify-center gap-6 mb-4">
                        {/* Original Image Thumbnail */}
                        <div className="text-center">
                          <img
                            src={jobs[currentJobIndex].originalImageUrl}
                            alt="Original"
                            className="w-[150px] h-[150px] object-cover rounded-lg border-2 border-gray-200 shadow-md"
                          />
                          <p className="text-sm text-gray-600 mt-2 brand-font-body">Original</p>
                        </div>

                        {/* Animated Arrow */}
                        <div className="flex flex-col items-center">
                          <div className="w-12 h-12 rounded-full bg-[#0D7877] flex items-center justify-center animate-pulse">
                            <span className="text-white text-xl">↓</span>
                          </div>
                        </div>

                        {/* Loading Spinner with Preview */}
                        <div className="text-center">
                          <div className="w-[150px] h-[150px] bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center relative overflow-hidden">
                            {/* Animated Background */}
                            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-shimmer"></div>

                            {/* Loading Spinner */}
                            <div className="relative z-10">
                              <RefreshCw className="w-8 h-8 text-[#0D7877] animate-spin mb-2" />
                              <div className="text-xs text-gray-600 brand-font-body">Processing...</div>
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 mt-2 brand-font-body">Enhanced</p>
                        </div>
                      </div>
                    )}

                    {/* Enhancement Details */}
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                      <p className="text-blue-800 brand-font-body font-medium mb-2">
                        Creating "{jobs[currentJobIndex]?.enhancementTitle}"
                      </p>
                      <p className="text-blue-700 brand-font-body text-sm">
                        {jobs[currentJobIndex]?.status === 'creating_prompt' 
                          ? 'Step 1 of 2: Analyzing requirements with Claude...'
                          : 'Step 2 of 2: Applying effects with GPT-Image-01...'
                        }
                      </p>
                    </div>

                    {/* Time Estimation */}
                    <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-center gap-2 mb-2">
                        <Clock className="w-5 h-5 text-gray-600" />
                        <span className="text-gray-800 brand-font-body font-medium">
                          Completes in ~{60 - currentJobTimer} seconds
                        </span>
                      </div>

                      {/* Live Countdown Bar */}
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-[#0D7877] h-2 rounded-full transition-all duration-1000 ease-linear"
                          style={{ width: `${(currentJobTimer / 60) * 100}%` }}
                        ></div>
                      </div>

                      <div className="flex justify-between text-xs text-gray-500 mt-2 brand-font-body">
                        <span>Processing enhancement {currentJobIndex + 1} of {jobs.length}</span>
                        <span>{completedCount} completed, {jobs.length - completedCount - failedCount - 1} waiting</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Individual Job Cards */}
          <div className="space-y-6">
            {jobs.map((job) => (
              <Card key={job.id} className={`brand-card transition-all duration-500 ${job.status === 'complete' ? 'animate-fade-in' : ''}`}>
                <CardContent className="p-6">
                  {/* Header */}
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-3">
                      {getStatusIcon(job.status)}
                      <h3 className="text-xl font-semibold brand-text-neutral brand-font-heading">
                        {job.enhancementTitle}
                      </h3>
                      <Badge className={`text-sm ${getStatusColor(job.status)}`}>
                        {job.status === 'queued' && 'Waiting...'}
                        {job.status === 'creating_prompt' && 'Creating Prompt...'}
                        {job.status === 'generating_image' && 'Generating...'}
                        {job.status === 'complete' && 'Complete!'}
                        {job.status === 'failed' && 'Failed'}
                      </Badge>
                    </div>

                    {/* Favorite Button */}
                    {job.status === 'complete' && job.resultImageUrl && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => toggleFavorite(job.id)}
                      >
                        {job.isFavorite ? (
                          <Star className="w-5 h-5 text-yellow-500 fill-current" />
                        ) : (
                          <StarOff className="w-5 h-5 text-gray-400" />
                        )}
                      </Button>
                    )}
                  </div>

                  {/* Progress Bar for Processing */}
                  {(job.status === 'creating_prompt' || job.status === 'generating_image') && (
                    <div className="mb-6">
                      <Progress 
                        value={job.progress} 
                        className="h-3 processing-gradient"
                      />
                      <p className="text-sm text-center text-gray-600 mt-2 brand-font-body">
                        {job.status === 'creating_prompt' ? 'Claude is analyzing your request...' : 'GPT-Image-01 is creating your enhancement...'}
                      </p>
                    </div>
                  )}

                  {/* Image Container - Centered */}
          <div className="flex items-center justify-center gap-8 mb-6">
            {job.status === 'complete' && job.resultImageUrl ? (
              /* Enhanced Image with Hover Comparison */
              <div className="text-center">
                <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">Enhanced Result</p>
                <div className="image-comparison-container relative w-[400px] h-[400px] rounded-lg overflow-hidden border-2 border-green-200 cursor-pointer group">
                  {/* Before Image (hidden by default, shown on hover) */}
                  <img
                    src={job.originalImageUrl}
                    alt="Original product"
                    className="before-image absolute inset-0 w-full h-full object-cover opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100"
                  />

                  {/* After Image (visible by default, faded on hover) */}
                  <img
                    src={job.resultImageUrl}
                    alt="Enhanced result"
                    className="after-image relative w-full h-full object-cover opacity-100 transition-opacity duration-300 ease-in-out group-hover:opacity-0"
                    onClick={() => window.open(job.resultImageUrl, '_blank')}
                  />

                  {/* Hover Indicator */}
                  <div className="absolute top-3 left-3 bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 brand-font-body">
                    Original Image
                  </div>

                  {/* Hint Text */}
                  <div className="absolute bottom-3 right-3 bg-[#0D7877] bg-opacity-90 text-white text-xs px-3 py-1 rounded-full opacity-60 group-hover:opacity-0 transition-opacity duration-300 brand-font-body">
                    Hover to compare
                  </div>

                  {/* Corner Icon */}
                  <div className="absolute top-3 right-3 w-8 h-8 bg-white bg-opacity-90 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <span className="text-gray-700 text-sm">↔️</span>
                  </div>
                </div>
              </div>
            ) : (
              /* Processing State - Show Before/Processing side by side */
              <>
                {/* Before Image */}
                <div className="text-center">
                  <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">Before</p>
                  <img
                    src={job.originalImageUrl}
                    alt="Original product"
                    className="w-[250px] h-[250px] object-cover rounded-lg border-2 border-gray-200 cursor-pointer hover:border-[#0D7877] transition-colors"
                    onClick={() => window.open(job.originalImageUrl, '_blank')}
                  />
                </div>

                {/* Arrow */}
                <div className="flex flex-col items-center">
                  <div className="w-12 h-12 rounded-full bg-[#0D7877] flex items-center justify-center">
                    <span className="text-white text-xl">→</span>
                  </div>
                </div>

                {/* After Image */}
                <div className="text-center">
                  <p className="text-sm font-medium text-gray-600 mb-2 brand-font-body">After</p>
                  <div className="w-[250px] h-[250px] bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center">
                    <div className="text-center">
                      {job.status === 'failed' ? (
                        <div className="text-red-500">
                          <AlertCircle className="w-8 h-8 mx-auto mb-2" />
                          <p className="text-sm">Enhancement Failed</p>
                        </div>
                      ) : (
                        <div className="text-gray-400">
                          <RefreshCw className={`w-8 h-8 mx-auto mb-2 ${job.status !== 'queued' ? 'animate-spin' : ''}`} />
                          <p className="text-sm">
                            {job.status === 'queued' ? 'Waiting...' : 'Processing...'}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </>
            )}
          </div>

                  {/* Action Buttons - Centered */}
                  {job.status === 'complete' && job.resultImageUrl && (
                    <div className="flex items-center justify-center gap-4">
                      {/* Download with Format Selector */}
                      <div className="flex items-center gap-2">
                        <Button
                          onClick={() => downloadImage(job.resultImageUrl!, job.enhancementTitle, selectedFormat)}
                          className="brand-button-primary brand-font-body"
                        >
                          <Download className="w-4 h-4 mr-2" />
                          Download {selectedFormat}
                        </Button>

                        <Select value={selectedFormat} onValueChange={(value: 'PNG' | 'JPG') => setSelectedFormat(value)}>
                          <SelectTrigger className="w-20">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="PNG">PNG</SelectItem>
                            <SelectItem value="JPG">JPG</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <Button
                        variant="outline"
                        onClick={() => window.open(job.resultImageUrl, '_blank')}
                        className="brand-button-secondary brand-font-body"
                      >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        View Full Size
                      </Button>

                      <Button
                        variant="outline"
                        onClick={() => shareResult(job)}
                        className="brand-button-secondary brand-font-body"
                      >
                        <Share2 className="w-4 h-4 mr-2" />
                        Share
                      </Button>
                    </div>
                  )}

                  {/* Error Handling */}
                  {job.status === 'failed' && (
                    <div className="text-center">
                      {job.errorMessage && (
                        <p className="text-sm text-red-600 mb-4 brand-font-body">
                          {job.errorMessage}
                        </p>
                      )}
                      <div className="flex items-center justify-center gap-3">
                        {job.retryCount < 3 && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => retryJob(job.id)}
                            className="brand-font-body"
                          >
                            <RefreshCw className="w-4 h-4 mr-2" />
                            Retry Enhancement
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => skipJob(job.id)}
                          className="brand-font-body text-gray-600"
                        >
                          Skip This Enhancement
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Download Options - Only show when complete */}
          {!isProcessing && successfulJobs.length > 0 && (
            <>
              {/* Divider */}
              <div className="my-12 border-t-2 border-gray-300"></div>

              {/* Download Options */}
              <Card className="brand-card">
                <CardHeader>
                  <CardTitle className="brand-font-heading brand-text-neutral">
                    Download Options
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                    <div>
                      <label className="text-sm font-medium brand-font-body mb-2 block">Format</label>
                      <Select value={selectedFormat} onValueChange={(value: 'PNG' | 'JPG') => setSelectedFormat(value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="PNG">PNG (High Quality)</SelectItem>
                          <SelectItem value="JPG">JPG (Smaller Size)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <label className="text-sm font-medium brand-font-body mb-2 block">Resolution</label>
                      <Select value={selectedResolution} onValueChange={(value: 'original' | 'hd' | '4k') => setSelectedResolution(value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="original">Original (1024×1024)</SelectItem>
                          <SelectItem value="hd">HD (1920×1920)</SelectItem>
                          <SelectItem value="4k">4K (3840×3840)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <label className="text-sm font-medium brand-font-body mb-2 block">Email Results</label>
                      <Input
                        type="email"
                        placeholder="your@email.com"
                        value={emailAddress}
                        onChange={(e) => setEmailAddress(e.target.value)}
                      />
                    </div>

                    <div className="flex items-end">
                      <Button
                        onClick={emailResults}
                        disabled={!emailAddress}
                        variant="outline"
                        className="w-full brand-font-body"
                      >
                        <Mail className="w-4 h-4 mr-2" />
                        Send Email
                      </Button>
                    </div>
                  </div>

                  <div className="flex gap-3">
                    <Button onClick={downloadAll} className="brand-button-primary brand-font-body">
                      <Archive className="w-4 h-4 mr-2" />
                      Download All ({successfulJobs.length})
                    </Button>
                    {favoriteCount > 0 && (
                      <Button onClick={downloadFavorites} variant="outline" className="brand-font-body">
                        <Star className="w-4 h-4 mr-2" />
                        Download Favorites ({favoriteCount})
                      </Button>
                    )}
                    <Link href="/upload-enhance">
                      <Button variant="outline" className="brand-button-secondary brand-font-body">
                        <Upload className="w-4 h-4 mr-2" />
                        Enhance Another Image
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </div>

        {/* Sticky Footer */}
        <div className="sticky-footer p-4 shadow-lg">
          <div className="container mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-[#0D7877]" />
                <span className="font-medium brand-text-neutral brand-font-body">
                  {isProcessing 
                    ? `Generation in progress... ${completedCount}/${jobs.length} complete`
                    : `✓ ${successfulJobs.length} enhancements ready`
                  }
                </span>
              </div>

              <div className="flex gap-3">
                <Link href="/select-ideas">
                  <Button variant="outline" className="brand-button-secondary brand-font-body">
                    <ChevronLeft className="w-4 h-4 mr-2" />
                    Back to Ideas
                  </Button>
                </Link>

                {!isProcessing && successfulJobs.length > 0 && (
                  <>
                    <Button
                      onClick={downloadAll}
                      className="brand-button-primary brand-font-body font-medium"
                    >
                      <Archive className="w-4 h-4 mr-2" />
                      Download All
                    </Button>

                    <Link href="/upload-enhance">
                      <Button
                        variant="outline"
                        className="brand-button-secondary brand-font-body font-medium"
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        New Enhancement
                      </Button>
                    </Link>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Email Capture Modal */}
      <EmailCaptureModal
        isOpen={showEmailModal}
        onClose={() => setShowEmailModal(false)}
        onEmailSubmit={handleEmailSubmit}
        enhancementCount={jobs.filter(job => job.status === 'complete').length}
      />

      {/* Upgrade Prompt Modal */}
      <UpgradePrompt
        isOpen={showUpgradePrompt}
        onClose={handleUpgradeClose}
        onSignUp={handleSignUp}
        onViewPricing={handleViewPricing}
      />
    </>
  )
}